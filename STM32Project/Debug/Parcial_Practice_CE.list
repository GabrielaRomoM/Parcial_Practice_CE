
Parcial_Practice_CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08005304  08005304  00006304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005990  08005990  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005990  08005990  00006990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005998  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000000c  080059a4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  080059a4  000075c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d5f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f9  00000000  00000000  00017d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001a498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  0001b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261f9  00000000  00000000  0001bda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012943  00000000  00000000  00041f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb261  00000000  00000000  000548e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fb43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  0013fb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00143578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052ec 	.word	0x080052ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052ec 	.word	0x080052ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a10      	ldr	r2, [pc, #64]	@ (8000508 <HAL_UART_RxCpltCallback+0x50>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d10a      	bne.n	80004e0 <HAL_UART_RxCpltCallback+0x28>
		  ring_buffer_write(&rb_usart1, data);
 80004ca:	4b10      	ldr	r3, [pc, #64]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	480f      	ldr	r0, [pc, #60]	@ (8000510 <HAL_UART_RxCpltCallback+0x58>)
 80004d2:	f000 faaa 	bl	8000a2a <ring_buffer_write>
		  HAL_UART_Receive_IT(&huart1, &data, 1);
 80004d6:	2201      	movs	r2, #1
 80004d8:	490c      	ldr	r1, [pc, #48]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004da:	480e      	ldr	r0, [pc, #56]	@ (8000514 <HAL_UART_RxCpltCallback+0x5c>)
 80004dc:	f003 f990 	bl	8003800 <HAL_UART_Receive_IT>
	  }
	if(huart -> Instance == USART2){
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <HAL_UART_RxCpltCallback+0x60>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d10a      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x48>
		  ring_buffer_write(&rb_usart2, data); // put the data received in buffer
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4619      	mov	r1, r3
 80004f0:	480a      	ldr	r0, [pc, #40]	@ (800051c <HAL_UART_RxCpltCallback+0x64>)
 80004f2:	f000 fa9a 	bl	8000a2a <ring_buffer_write>
		  HAL_UART_Receive_IT(&huart2, &data, 1); // enable interrupt to continue receiving
 80004f6:	2201      	movs	r2, #1
 80004f8:	4904      	ldr	r1, [pc, #16]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004fa:	4809      	ldr	r0, [pc, #36]	@ (8000520 <HAL_UART_RxCpltCallback+0x68>)
 80004fc:	f003 f980 	bl	8003800 <HAL_UART_Receive_IT>
	}

}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40013800 	.word	0x40013800
 800050c:	2000018c 	.word	0x2000018c
 8000510:	2000019c 	.word	0x2000019c
 8000514:	2000007c 	.word	0x2000007c
 8000518:	40004400 	.word	0x40004400
 800051c:	200001b0 	.word	0x200001b0
 8000520:	20000104 	.word	0x20000104

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fca7 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f8a5 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f995 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f963 	bl	8000800 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800053a:	f000 f931 	bl	80007a0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800053e:	f000 f8ef 	bl	8000720 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize ring buffer (control, memory, and capacity) */
  ring_buffer_init(&rb_usart1, mem_usart1, CAPACITY_USART1);
 8000542:	220a      	movs	r2, #10
 8000544:	493f      	ldr	r1, [pc, #252]	@ (8000644 <main+0x120>)
 8000546:	4840      	ldr	r0, [pc, #256]	@ (8000648 <main+0x124>)
 8000548:	f000 fa24 	bl	8000994 <ring_buffer_init>
  ring_buffer_init(&rb_usart2, mem_usart2, CAPACITY_USART2);
 800054c:	220a      	movs	r2, #10
 800054e:	493f      	ldr	r1, [pc, #252]	@ (800064c <main+0x128>)
 8000550:	483f      	ldr	r0, [pc, #252]	@ (8000650 <main+0x12c>)
 8000552:	f000 fa1f 	bl	8000994 <ring_buffer_init>
  ssd1306_Init();
 8000556:	f004 fc9f 	bl	8004e98 <ssd1306_Init>
  ssd1306_Fill(Black);
 800055a:	2000      	movs	r0, #0
 800055c:	f004 fd06 	bl	8004f6c <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 8000560:	2114      	movs	r1, #20
 8000562:	200a      	movs	r0, #10
 8000564:	f004 fe4c 	bl	8005200 <ssd1306_SetCursor>
  ssd1306_WriteString("Hi!", Font_6x8, White);
 8000568:	4b3a      	ldr	r3, [pc, #232]	@ (8000654 <main+0x130>)
 800056a:	2201      	movs	r2, #1
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000570:	4839      	ldr	r0, [pc, #228]	@ (8000658 <main+0x134>)
 8000572:	f004 fe1f 	bl	80051b4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000576:	f004 fd11 	bl	8004f9c <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1,&data,1);
 800057a:	2201      	movs	r2, #1
 800057c:	4937      	ldr	r1, [pc, #220]	@ (800065c <main+0x138>)
 800057e:	4838      	ldr	r0, [pc, #224]	@ (8000660 <main+0x13c>)
 8000580:	f003 f93e 	bl	8003800 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&data,1);
 8000584:	2201      	movs	r2, #1
 8000586:	4935      	ldr	r1, [pc, #212]	@ (800065c <main+0x138>)
 8000588:	4836      	ldr	r0, [pc, #216]	@ (8000664 <main+0x140>)
 800058a:	f003 f939 	bl	8003800 <HAL_UART_Receive_IT>
		      ssd1306_UpdateScreen();
		      // Reset for next input
		      id_index = 0;
		  }
	  }*/
	  uint8_t byte = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	737b      	strb	r3, [r7, #13]
	  if (ring_buffer_read(&rb_usart2, &byte) != 0) {
 8000592:	f107 030d 	add.w	r3, r7, #13
 8000596:	4619      	mov	r1, r3
 8000598:	482d      	ldr	r0, [pc, #180]	@ (8000650 <main+0x12c>)
 800059a:	f000 fa83 	bl	8000aa4 <ring_buffer_read>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f4      	beq.n	800058e <main+0x6a>
	  if (ring_buffer_is_full(&rb_usart2) != 0) {
 80005a4:	482a      	ldr	r0, [pc, #168]	@ (8000650 <main+0x12c>)
 80005a6:	f000 fa1c 	bl	80009e2 <ring_buffer_is_full>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0ee      	beq.n	800058e <main+0x6a>
		  uint8_t id_incorrect = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
		  char my_id[] = "1080691539";
 80005b4:	4a2c      	ldr	r2, [pc, #176]	@ (8000668 <main+0x144>)
 80005b6:	463b      	mov	r3, r7
 80005b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ba:	c303      	stmia	r3!, {r0, r1}
 80005bc:	801a      	strh	r2, [r3, #0]
 80005be:	3302      	adds	r3, #2
 80005c0:	0c12      	lsrs	r2, r2, #16
 80005c2:	701a      	strb	r2, [r3, #0]
		  for (uint8_t idx = 0; idx < sizeof(my_id); idx++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e015      	b.n	80005f6 <main+0xd2>
			  if (ring_buffer_read(&rb_usart2, &byte) != 0) { // 0x20
 80005ca:	f107 030d 	add.w	r3, r7, #13
 80005ce:	4619      	mov	r1, r3
 80005d0:	481f      	ldr	r0, [pc, #124]	@ (8000650 <main+0x12c>)
 80005d2:	f000 fa67 	bl	8000aa4 <ring_buffer_read>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d009      	beq.n	80005f0 <main+0xcc>
				  if (byte != my_id[idx]) {
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	3310      	adds	r3, #16
 80005e0:	443b      	add	r3, r7
 80005e2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80005e6:	7b7b      	ldrb	r3, [r7, #13]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d001      	beq.n	80005f0 <main+0xcc>
					  id_incorrect = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
		  for (uint8_t idx = 0; idx < sizeof(my_id); idx++) {
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	3301      	adds	r3, #1
 80005f4:	73bb      	strb	r3, [r7, #14]
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9e6      	bls.n	80005ca <main+0xa6>
				  }
			  }
		  }
		  if (id_incorrect == 0) {
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10f      	bne.n	8000622 <main+0xfe>
		      HAL_UART_Transmit(&huart2, (uint8_t *)"Gabriela Romo\r\n", 15, 100);
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	220f      	movs	r2, #15
 8000606:	4919      	ldr	r1, [pc, #100]	@ (800066c <main+0x148>)
 8000608:	4816      	ldr	r0, [pc, #88]	@ (8000664 <main+0x140>)
 800060a:	f003 f86f 	bl	80036ec <HAL_UART_Transmit>
		      ssd1306_WriteString("Gabriela Romo", Font_6x8, White);
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <main+0x130>)
 8000610:	2201      	movs	r2, #1
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <main+0x14c>)
 8000618:	f004 fdcc 	bl	80051b4 <ssd1306_WriteString>
		      ssd1306_UpdateScreen();
 800061c:	f004 fcbe 	bl	8004f9c <ssd1306_UpdateScreen>
 8000620:	e7b5      	b.n	800058e <main+0x6a>
		  } else {
		      HAL_UART_Transmit(&huart2, (uint8_t *)"Error\r\n", 7, 10);
 8000622:	230a      	movs	r3, #10
 8000624:	2207      	movs	r2, #7
 8000626:	4913      	ldr	r1, [pc, #76]	@ (8000674 <main+0x150>)
 8000628:	480e      	ldr	r0, [pc, #56]	@ (8000664 <main+0x140>)
 800062a:	f003 f85f 	bl	80036ec <HAL_UART_Transmit>
		      ssd1306_WriteString("Error", Font_6x8, White);
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <main+0x130>)
 8000630:	2201      	movs	r2, #1
 8000632:	9200      	str	r2, [sp, #0]
 8000634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000636:	4810      	ldr	r0, [pc, #64]	@ (8000678 <main+0x154>)
 8000638:	f004 fdbc 	bl	80051b4 <ssd1306_WriteString>
		      ssd1306_UpdateScreen();
 800063c:	f004 fcae 	bl	8004f9c <ssd1306_UpdateScreen>
  {
 8000640:	e7a5      	b.n	800058e <main+0x6a>
 8000642:	bf00      	nop
 8000644:	20000190 	.word	0x20000190
 8000648:	2000019c 	.word	0x2000019c
 800064c:	200001a4 	.word	0x200001a4
 8000650:	200001b0 	.word	0x200001b0
 8000654:	0800597c 	.word	0x0800597c
 8000658:	08005304 	.word	0x08005304
 800065c:	2000018c 	.word	0x2000018c
 8000660:	2000007c 	.word	0x2000007c
 8000664:	20000104 	.word	0x20000104
 8000668:	08005338 	.word	0x08005338
 800066c:	08005308 	.word	0x08005308
 8000670:	08005318 	.word	0x08005318
 8000674:	08005328 	.word	0x08005328
 8000678:	08005330 	.word	0x08005330

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	@ 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	@ 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe02 	bl	8005294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a2:	f001 fcc3 	bl	800202c <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 f96c 	bl	8000988 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fcfa 	bl	80020d8 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f000 f94d 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f8c2 	bl	8002890 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f939 	bl	8000988 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	@ 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C1_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C1_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C1_Init+0x74>)
 800075c:	f000 ffa3 	bl	80016a6 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 f90f 	bl	8000988 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C1_Init+0x74>)
 800076e:	f001 fbb7 	bl	8001ee0 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f906 	bl	8000988 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000780:	f001 fbf9 	bl	8001f76 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f8fd 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000028 	.word	0x20000028
 8000798:	40005400 	.word	0x40005400
 800079c:	10909cec 	.word	0x10909cec

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	@ (80007fc <MX_USART1_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007e4:	f002 ff34 	bl	8003650 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f8cb 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <MX_USART2_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000844:	f002 ff04 	bl	8003650 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f89b 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000104 	.word	0x20000104
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b41      	ldr	r3, [pc, #260]	@ (800097c <MX_GPIO_Init+0x11c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	4a40      	ldr	r2, [pc, #256]	@ (800097c <MX_GPIO_Init+0x11c>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000882:	4b3e      	ldr	r3, [pc, #248]	@ (800097c <MX_GPIO_Init+0x11c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b3b      	ldr	r3, [pc, #236]	@ (800097c <MX_GPIO_Init+0x11c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a3a      	ldr	r2, [pc, #232]	@ (800097c <MX_GPIO_Init+0x11c>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b38      	ldr	r3, [pc, #224]	@ (800097c <MX_GPIO_Init+0x11c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b35      	ldr	r3, [pc, #212]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b32      	ldr	r3, [pc, #200]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a2e      	ldr	r2, [pc, #184]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	21a0      	movs	r1, #160	@ 0xa0
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f000 fea7 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4821      	ldr	r0, [pc, #132]	@ (8000980 <MX_GPIO_Init+0x120>)
 80008fa:	f000 fcef 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008fe:	2302      	movs	r3, #2
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000916:	f000 fce1 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800091a:	23a0      	movs	r3, #160	@ 0xa0
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f000 fcd2 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	480d      	ldr	r0, [pc, #52]	@ (8000984 <MX_GPIO_Init+0x124>)
 800094e:	f000 fcc5 	bl	80012dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2006      	movs	r0, #6
 8000958:	f000 fc0b 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800095c:	2006      	movs	r0, #6
 800095e:	f000 fc24 	bl	80011aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2007      	movs	r0, #7
 8000968:	f000 fc03 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800096c:	2007      	movs	r0, #7
 800096e:	f000 fc1c 	bl	80011aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	@ 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	48000800 	.word	0x48000800
 8000984:	48000400 	.word	0x48000400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem, uint8_t cap)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	4613      	mov	r3, r2
 80009a0:	71fb      	strb	r3, [r7, #7]
    rb->buffer = mem;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	601a      	str	r2, [r3, #0]
    rb->capacity = cap;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	71da      	strb	r2, [r3, #7]
    ring_buffer_reset(rb);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 f804 	bl	80009bc <ring_buffer_reset>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <ring_buffer_reset>:
 *  @brief Esta función reinicia los datos disponibles en el buffer
 *
 *  @retval 0 para volver las banderas a su estado inicial
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	711a      	strb	r2, [r3, #4]
    rb->tail = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	719a      	strb	r2, [r3, #6]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <ring_buffer_is_full>:
 *  @brief Esta función revisa si el buffer esta lleno
 *
 *  @retval is full: 1 si esta lleno, 0 de lo contrario
 */
uint8_t ring_buffer_is_full(ring_buffer_t *rb)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
    return  rb->is_full;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	799b      	ldrb	r3, [r3, #6]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <ring_buffer_is_empty>:
 *  @brief Esta función revisa si el buffer esta vacio
 *
 *  @retval 1 si esta vacio, 0 de lo contrario
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *rb)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
    return ((rb->head == rb->tail) && !rb->is_full) ? 1 : 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791a      	ldrb	r2, [r3, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d105      	bne.n	8000a1a <ring_buffer_is_empty+0x20>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	799b      	ldrb	r3, [r3, #6]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <ring_buffer_is_empty+0x20>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <ring_buffer_is_empty+0x22>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <ring_buffer_write>:
 *
 *  @retval Ninguno
 */

void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
    rb->buffer[rb->head] = data;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	7912      	ldrb	r2, [r2, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	78fa      	ldrb	r2, [r7, #3]
 8000a42:	701a      	strb	r2, [r3, #0]
    rb->head = (rb->head + 1) % rb->capacity;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	79d2      	ldrb	r2, [r2, #7]
 8000a4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a52:	fb01 f202 	mul.w	r2, r1, r2
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	711a      	strb	r2, [r3, #4]

    if (rb->is_full) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	799b      	ldrb	r3, [r3, #6]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00c      	beq.n	8000a80 <ring_buffer_write+0x56>
        rb->tail = (rb->tail + 1) % rb->capacity;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	79d2      	ldrb	r2, [r2, #7]
 8000a70:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a74:	fb01 f202 	mul.w	r2, r1, r2
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	715a      	strb	r2, [r3, #5]
    }

    rb->is_full = (rb->head == rb->tail);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791a      	ldrb	r2, [r3, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	795b      	ldrb	r3, [r3, #5]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	719a      	strb	r2, [r3, #6]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <ring_buffer_read>:
 *
 *  @retval 1: Hay datos disponibles, 0: No hay datos
 */

uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *byte)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    if (ring_buffer_is_empty(rb)) {
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa3 	bl	80009fa <ring_buffer_is_empty>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <ring_buffer_read+0x1a>
        return 0; // buffer vacio
 8000aba:	2300      	movs	r3, #0
 8000abc:	e018      	b.n	8000af0 <ring_buffer_read+0x4c>
    }

    *byte = rb->buffer[rb->tail];
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	7952      	ldrb	r2, [r2, #5]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % rb->capacity;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	795b      	ldrb	r3, [r3, #5]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	79d2      	ldrb	r2, [r2, #7]
 8000ad8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000adc:	fb01 f202 	mul.w	r2, r1, r2
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	719a      	strb	r2, [r3, #6]

    return 1; // buffer con datos
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ac      	sub	sp, #176	@ 0xb0
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2288      	movs	r2, #136	@ 0x88
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fb97 	bl	8005294 <memset>
  if(hi2c->Instance==I2C1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <HAL_I2C_MspInit+0xb0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d13b      	bne.n	8000be8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f8ab 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b88:	f7ff fefe 	bl	8000988 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_I2C_MspInit+0xb4>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <HAL_I2C_MspInit+0xb4>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <HAL_I2C_MspInit+0xb4>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480b      	ldr	r0, [pc, #44]	@ (8000bf8 <HAL_I2C_MspInit+0xb8>)
 8000bcc:	f000 fb86 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_I2C_MspInit+0xb4>)
 8000bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_I2C_MspInit+0xb4>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_I2C_MspInit+0xb4>)
 8000bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	37b0      	adds	r7, #176	@ 0xb0
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0ae      	sub	sp, #184	@ 0xb8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2288      	movs	r2, #136	@ 0x88
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fb39 	bl	8005294 <memset>
  if(huart->Instance==USART1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a4b      	ldr	r2, [pc, #300]	@ (8000d54 <HAL_UART_MspInit+0x158>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d145      	bne.n	8000cb8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c30:	2300      	movs	r3, #0
 8000c32:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f84d 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c44:	f7ff fea0 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c48:	4b43      	ldr	r3, [pc, #268]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4c:	4a42      	ldr	r2, [pc, #264]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c52:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c54:	4b40      	ldr	r3, [pc, #256]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c64:	4a3c      	ldr	r2, [pc, #240]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c78:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c92:	2307      	movs	r3, #7
 8000c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca2:	f000 fb1b 	bl	80012dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2025      	movs	r0, #37	@ 0x25
 8000cac:	f000 fa61 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cb0:	2025      	movs	r0, #37	@ 0x25
 8000cb2:	f000 fa7a 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb6:	e048      	b.n	8000d4a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a27      	ldr	r2, [pc, #156]	@ (8000d5c <HAL_UART_MspInit+0x160>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d143      	bne.n	8000d4a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 f802 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000cda:	f7ff fe55 	bl	8000988 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_UART_MspInit+0x15c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f000 fad1 	bl	80012dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2026      	movs	r0, #38	@ 0x26
 8000d40:	f000 fa17 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d44:	2026      	movs	r0, #38	@ 0x26
 8000d46:	f000 fa30 	bl	80011aa <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	37b8      	adds	r7, #184	@ 0xb8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40004400 	.word	0x40004400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f8bd 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fc4c 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f000 fc45 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <USART1_IRQHandler+0x10>)
 8000de2:	f002 fd59 	bl	8003898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000007c 	.word	0x2000007c

08000df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <USART2_IRQHandler+0x10>)
 8000df6:	f002 fd4f 	bl	8003898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000104 	.word	0x20000104

08000e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f004 fa25 	bl	80052a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fb63 	bl	8000524 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e6c:	08005998 	.word	0x08005998
  ldr r2, =_sbss
 8000e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e74:	200005c4 	.word	0x200005c4

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <HAL_Init+0x3c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_Init+0x3c>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f962 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f80f 	bl	8000ebc <HAL_InitTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	e001      	b.n	8000eae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eaa:	f7ff fe25 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d023      	beq.n	8000f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <HAL_InitTick+0x70>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_InitTick+0x6c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f96d 	bl	80011c6 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d809      	bhi.n	8000f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f937 	bl	8001172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f04:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <HAL_InitTick+0x74>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e004      	b.n	8000f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e001      	b.n	8000f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	200001b8 	.word	0x200001b8

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001b8 	.word	0x200001b8

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	@ (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	@ 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff3e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d008      	beq.n	8001208 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e022      	b.n	800124e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122c:	f003 021c 	and.w	r2, r3, #28
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d005      	beq.n	800127e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2204      	movs	r2, #4
 8001276:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e029      	b.n	80012d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 020e 	bic.w	r2, r2, #14
 800128c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f003 021c 	and.w	r2, r3, #28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
    }
  }
  return status;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e17f      	b.n	80015ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8171 	beq.w	80015e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x40>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b03      	cmp	r3, #3
 8001388:	d118      	bne.n	80013bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001390:	2201      	movs	r2, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	f003 0201 	and.w	r2, r3, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d017      	beq.n	80013f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	6939      	ldr	r1, [r7, #16]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80ac 	beq.w	80015e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b5f      	ldr	r3, [pc, #380]	@ (800160c <HAL_GPIO_Init+0x330>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001492:	4a5e      	ldr	r2, [pc, #376]	@ (800160c <HAL_GPIO_Init+0x330>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6613      	str	r3, [r2, #96]	@ 0x60
 800149a:	4b5c      	ldr	r3, [pc, #368]	@ (800160c <HAL_GPIO_Init+0x330>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001610 <HAL_GPIO_Init+0x334>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x242>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001614 <HAL_GPIO_Init+0x338>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x23e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001618 <HAL_GPIO_Init+0x33c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x23a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <HAL_GPIO_Init+0x340>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x236>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001620 <HAL_GPIO_Init+0x344>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x232>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001624 <HAL_GPIO_Init+0x348>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x22e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001628 <HAL_GPIO_Init+0x34c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x22a>
 8001502:	2306      	movs	r3, #6
 8001504:	e00c      	b.n	8001520 <HAL_GPIO_Init+0x244>
 8001506:	2307      	movs	r3, #7
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800150a:	2305      	movs	r3, #5
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x244>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x244>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x244>
 800151e:	2300      	movs	r3, #0
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001530:	4937      	ldr	r1, [pc, #220]	@ (8001610 <HAL_GPIO_Init+0x334>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800153e:	4b3b      	ldr	r3, [pc, #236]	@ (800162c <HAL_GPIO_Init+0x350>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001562:	4a32      	ldr	r2, [pc, #200]	@ (800162c <HAL_GPIO_Init+0x350>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001568:	4b30      	ldr	r3, [pc, #192]	@ (800162c <HAL_GPIO_Init+0x350>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800158c:	4a27      	ldr	r2, [pc, #156]	@ (800162c <HAL_GPIO_Init+0x350>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_GPIO_Init+0x350>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_GPIO_Init+0x350>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_GPIO_Init+0x350>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e0:	4a12      	ldr	r2, [pc, #72]	@ (800162c <HAL_GPIO_Init+0x350>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f ae78 	bne.w	80012ec <HAL_GPIO_Init+0x10>
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800
 800161c:	48000c00 	.word	0x48000c00
 8001620:	48001000 	.word	0x48001000
 8001624:	48001400 	.word	0x48001400
 8001628:	48001800 	.word	0x48001800
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164c:	e002      	b.n	8001654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f806 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e08d      	b.n	80017d4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fa37 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2224      	movs	r2, #36	@ 0x24
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001706:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	e006      	b.n	800172e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800172c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d108      	bne.n	8001748 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001756:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800176a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800177a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69d9      	ldr	r1, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	817b      	strh	r3, [r7, #10]
 80017ee:	460b      	mov	r3, r1
 80017f0:	813b      	strh	r3, [r7, #8]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	f040 80f9 	bne.w	80019f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_I2C_Mem_Write+0x34>
 800180a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001816:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0ed      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_I2C_Mem_Write+0x4e>
 8001826:	2302      	movs	r3, #2
 8001828:	e0e6      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001832:	f7ff fb93 	bl	8000f5c <HAL_GetTick>
 8001836:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2319      	movs	r3, #25
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f955 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0d1      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2221      	movs	r2, #33	@ 0x21
 8001858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2240      	movs	r2, #64	@ 0x40
 8001860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800187c:	88f8      	ldrh	r0, [r7, #6]
 800187e:	893a      	ldrh	r2, [r7, #8]
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4603      	mov	r3, r0
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f8b9 	bl	8001a04 <I2C_RequestMemoryWrite>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0a9      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2bff      	cmp	r3, #255	@ 0xff
 80018ac:	d90e      	bls.n	80018cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	22ff      	movs	r2, #255	@ 0xff
 80018b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	8979      	ldrh	r1, [r7, #10]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fad9 	bl	8001e7c <I2C_TransferConfig>
 80018ca:	e00f      	b.n	80018ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	8979      	ldrh	r1, [r7, #10]
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fac8 	bl	8001e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f958 	bl	8001ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e07b      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d034      	beq.n	80019a4 <HAL_I2C_Mem_Write+0x1c8>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	d130      	bne.n	80019a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001948:	2200      	movs	r2, #0
 800194a:	2180      	movs	r1, #128	@ 0x80
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f8d1 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e04d      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001960:	b29b      	uxth	r3, r3
 8001962:	2bff      	cmp	r3, #255	@ 0xff
 8001964:	d90e      	bls.n	8001984 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	22ff      	movs	r2, #255	@ 0xff
 800196a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	b2da      	uxtb	r2, r3
 8001972:	8979      	ldrh	r1, [r7, #10]
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fa7d 	bl	8001e7c <I2C_TransferConfig>
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001992:	b2da      	uxtb	r2, r3
 8001994:	8979      	ldrh	r1, [r7, #10]
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fa6c 	bl	8001e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d19e      	bne.n	80018ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f93e 	bl	8001c34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e01a      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2220      	movs	r2, #32
 80019c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_I2C_Mem_Write+0x224>)
 80019d6:	400b      	ands	r3, r1
 80019d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2220      	movs	r2, #32
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80019f6:	2302      	movs	r3, #2
  }
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	fe00e800 	.word	0xfe00e800

08001a04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	817b      	strh	r3, [r7, #10]
 8001a16:	460b      	mov	r3, r1
 8001a18:	813b      	strh	r3, [r7, #8]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8979      	ldrh	r1, [r7, #10]
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <I2C_RequestMemoryWrite+0xa4>)
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 fa25 	bl	8001e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	69b9      	ldr	r1, [r7, #24]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f8b5 	bl	8001ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e02c      	b.n	8001aa0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a4c:	893b      	ldrh	r3, [r7, #8]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a56:	e015      	b.n	8001a84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f89b 	bl	8001ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e012      	b.n	8001aa0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7a:	893b      	ldrh	r3, [r7, #8]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f830 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	80002000 	.word	0x80002000

08001aac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d103      	bne.n	8001aca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d007      	beq.n	8001ae8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	619a      	str	r2, [r3, #24]
  }
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b04:	e03b      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	6839      	ldr	r1, [r7, #0]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f8d6 	bl	8001cbc <I2C_IsErrorOccurred>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e041      	b.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d02d      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff fa1b 	bl	8000f5c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d122      	bne.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4013      	ands	r3, r2
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d113      	bne.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4013      	ands	r3, r2
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d0b4      	beq.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb2:	e033      	b.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f87f 	bl	8001cbc <I2C_IsErrorOccurred>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e031      	b.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d025      	beq.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7ff f9c4 	bl	8000f5c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11a      	bne.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d013      	beq.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e007      	b.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d1c4      	bne.n	8001bb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c40:	e02f      	b.n	8001ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f838 	bl	8001cbc <I2C_IsErrorOccurred>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e02d      	b.n	8001cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7ff f981 	bl	8000f5c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11a      	bne.n	8001ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d013      	beq.n	8001ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f043 0220 	orr.w	r2, r3, #32
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e007      	b.n	8001cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d1c8      	bne.n	8001c42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d068      	beq.n	8001dba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2210      	movs	r2, #16
 8001cee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cf0:	e049      	b.n	8001d86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d045      	beq.n	8001d86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7ff f92f 	bl	8000f5c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d302      	bcc.n	8001d10 <I2C_IsErrorOccurred+0x54>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d13a      	bne.n	8001d86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d32:	d121      	bne.n	8001d78 <I2C_IsErrorOccurred+0xbc>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d3a:	d01d      	beq.n	8001d78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d3c:	7cfb      	ldrb	r3, [r7, #19]
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d01a      	beq.n	8001d78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d52:	f7ff f903 	bl	8000f5c <HAL_GetTick>
 8001d56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d58:	e00e      	b.n	8001d78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d5a:	f7ff f8ff 	bl	8000f5c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b19      	cmp	r3, #25
 8001d66:	d907      	bls.n	8001d78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	f043 0320 	orr.w	r3, r3, #32
 8001d6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d76:	e006      	b.n	8001d86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d1e9      	bne.n	8001d5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d003      	beq.n	8001d9c <I2C_IsErrorOccurred+0xe0>
 8001d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0aa      	beq.n	8001cf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d103      	bne.n	8001dac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01c      	beq.n	8001e6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fe3b 	bl	8001aac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <I2C_IsErrorOccurred+0x1bc>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3728      	adds	r7, #40	@ 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	fe00e800 	.word	0xfe00e800

08001e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e94:	7a7b      	ldrb	r3, [r7, #9]
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	0d5b      	lsrs	r3, r3, #21
 8001eb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <I2C_TransferConfig+0x60>)
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	ea02 0103 	and.w	r1, r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	03ff63ff 	.word	0x03ff63ff

08001ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d138      	bne.n	8001f68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e032      	b.n	8001f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d139      	bne.n	8002000 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e033      	b.n	8002002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2224      	movs	r2, #36	@ 0x24
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002014:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <HAL_PWREx_GetVoltageRange+0x18>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40007000 	.word	0x40007000

0800202c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800203a:	d130      	bne.n	800209e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800203c:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002048:	d038      	beq.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800204a:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002052:	4a1e      	ldr	r2, [pc, #120]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002054:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002058:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800205a:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2232      	movs	r2, #50	@ 0x32
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	4a1b      	ldr	r2, [pc, #108]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9b      	lsrs	r3, r3, #18
 800206c:	3301      	adds	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002070:	e002      	b.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3b01      	subs	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002084:	d102      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f2      	bne.n	8002072 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002098:	d110      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e00f      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020aa:	d007      	beq.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ac:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020b4:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40007000 	.word	0x40007000
 80020d0:	20000000 	.word	0x20000000
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e3ca      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ea:	4b97      	ldr	r3, [pc, #604]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f4:	4b94      	ldr	r3, [pc, #592]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80e4 	beq.w	80022d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_RCC_OscConfig+0x4a>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	f040 808b 	bne.w	8002230 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 8087 	bne.w	8002230 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002122:	4b89      	ldr	r3, [pc, #548]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x62>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e3a2      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	4b82      	ldr	r3, [pc, #520]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_RCC_OscConfig+0x7c>
 800214a:	4b7f      	ldr	r3, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002152:	e005      	b.n	8002160 <HAL_RCC_OscConfig+0x88>
 8002154:	4b7c      	ldr	r3, [pc, #496]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002160:	4293      	cmp	r3, r2
 8002162:	d223      	bcs.n	80021ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fd55 	bl	8002c18 <RCC_SetFlashLatencyFromMSIRange>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e383      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002178:	4b73      	ldr	r3, [pc, #460]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a72      	ldr	r2, [pc, #456]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b70      	ldr	r3, [pc, #448]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	496d      	ldr	r1, [pc, #436]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	4b6c      	ldr	r3, [pc, #432]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	4968      	ldr	r1, [pc, #416]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
 80021aa:	e025      	b.n	80021f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ac:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a65      	ldr	r2, [pc, #404]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4960      	ldr	r1, [pc, #384]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	495b      	ldr	r1, [pc, #364]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fd15 	bl	8002c18 <RCC_SetFlashLatencyFromMSIRange>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e343      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021f8:	f000 fc4a 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	4950      	ldr	r1, [pc, #320]	@ (800234c <HAL_RCC_OscConfig+0x274>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	4a4e      	ldr	r2, [pc, #312]	@ (8002350 <HAL_RCC_OscConfig+0x278>)
 8002216:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002218:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_RCC_OscConfig+0x27c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fe4d 	bl	8000ebc <HAL_InitTick>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d052      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	e327      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d032      	beq.n	800229e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002238:	4b43      	ldr	r3, [pc, #268]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a42      	ldr	r2, [pc, #264]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002244:	f7fe fe8a 	bl	8000f5c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800224c:	f7fe fe86 	bl	8000f5c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e310      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a36      	ldr	r2, [pc, #216]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4931      	ldr	r1, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002288:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	492c      	ldr	r1, [pc, #176]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	e01a      	b.n	80022d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a29      	ldr	r2, [pc, #164]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fe57 	bl	8000f5c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b2:	f7fe fe53 	bl	8000f5c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e2dd      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c4:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1da>
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d074      	beq.n	80023ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x21a>
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d10e      	bne.n	800230a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d064      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2f0>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d160      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e2ba      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x24a>
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0b      	ldr	r2, [pc, #44]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e026      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800232a:	d115      	bne.n	8002358 <HAL_RCC_OscConfig+0x280>
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a05      	ldr	r2, [pc, #20]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 8002332:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b03      	ldr	r3, [pc, #12]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a02      	ldr	r2, [pc, #8]	@ (8002348 <HAL_RCC_OscConfig+0x270>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	08005344 	.word	0x08005344
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004
 8002358:	4ba0      	ldr	r3, [pc, #640]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a9f      	ldr	r2, [pc, #636]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b9d      	ldr	r3, [pc, #628]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a9c      	ldr	r2, [pc, #624]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fdf0 	bl	8000f5c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fdec 	bl	8000f5c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e276      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002392:	4b92      	ldr	r3, [pc, #584]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x2a8>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fddc 	bl	8000f5c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fdd8 	bl	8000f5c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e262      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ba:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2d0>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d060      	beq.n	8002498 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x310>
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d119      	bne.n	8002416 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d116      	bne.n	8002416 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e8:	4b7c      	ldr	r3, [pc, #496]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x328>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e23f      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b76      	ldr	r3, [pc, #472]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	4973      	ldr	r1, [pc, #460]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002414:	e040      	b.n	8002498 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d023      	beq.n	8002466 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241e:	4b6f      	ldr	r3, [pc, #444]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6e      	ldr	r2, [pc, #440]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fd97 	bl	8000f5c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002432:	f7fe fd93 	bl	8000f5c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e21d      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002444:	4b65      	ldr	r3, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b62      	ldr	r3, [pc, #392]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	495f      	ldr	r1, [pc, #380]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	e018      	b.n	8002498 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002466:	4b5d      	ldr	r3, [pc, #372]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5c      	ldr	r2, [pc, #368]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800246c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fd73 	bl	8000f5c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fd6f 	bl	8000f5c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1f9      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d03c      	beq.n	800251e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ac:	4b4b      	ldr	r3, [pc, #300]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	4a4a      	ldr	r2, [pc, #296]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fd4e 	bl	8000f5c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fd4a 	bl	8000f5c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1d4      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80024d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ef      	beq.n	80024c4 <HAL_RCC_OscConfig+0x3ec>
 80024e4:	e01b      	b.n	800251e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e6:	4b3d      	ldr	r3, [pc, #244]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ec:	4a3b      	ldr	r2, [pc, #236]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fd31 	bl	8000f5c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fe:	f7fe fd2d 	bl	8000f5c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1b7      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002510:	4b32      	ldr	r3, [pc, #200]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ef      	bne.n	80024fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80a6 	beq.w	8002678 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002530:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	4a26      	ldr	r2, [pc, #152]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002546:	6593      	str	r3, [r2, #88]	@ 0x58
 8002548:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002554:	2301      	movs	r3, #1
 8002556:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <HAL_RCC_OscConfig+0x508>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d118      	bne.n	8002596 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002564:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_RCC_OscConfig+0x508>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_RCC_OscConfig+0x508>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002570:	f7fe fcf4 	bl	8000f5c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002578:	f7fe fcf0 	bl	8000f5c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e17a      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_RCC_OscConfig+0x508>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4d8>
 800259e:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ae:	e029      	b.n	8002604 <HAL_RCC_OscConfig+0x52c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d115      	bne.n	80025e4 <HAL_RCC_OscConfig+0x50c>
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	4a03      	ldr	r2, [pc, #12]	@ (80025dc <HAL_RCC_OscConfig+0x504>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d8:	e014      	b.n	8002604 <HAL_RCC_OscConfig+0x52c>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	4a9b      	ldr	r2, [pc, #620]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f4:	4b98      	ldr	r3, [pc, #608]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	4a97      	ldr	r2, [pc, #604]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d016      	beq.n	800263a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fca6 	bl	8000f5c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe fca2 	bl	8000f5c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e12a      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262a:	4b8b      	ldr	r3, [pc, #556]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ed      	beq.n	8002614 <HAL_RCC_OscConfig+0x53c>
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe fc8f 	bl	8000f5c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fc8b 	bl	8000f5c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e113      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002658:	4b7f      	ldr	r3, [pc, #508]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ed      	bne.n	8002642 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b7a      	ldr	r3, [pc, #488]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	4a79      	ldr	r2, [pc, #484]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80fe 	beq.w	800287e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	2b02      	cmp	r3, #2
 8002688:	f040 80d0 	bne.w	800282c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800268c:	4b72      	ldr	r3, [pc, #456]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	429a      	cmp	r2, r3
 800269e:	d130      	bne.n	8002702 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	3b01      	subs	r3, #1
 80026ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d127      	bne.n	8002702 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11f      	bne.n	8002702 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026cc:	2a07      	cmp	r2, #7
 80026ce:	bf14      	ite	ne
 80026d0:	2201      	movne	r2, #1
 80026d2:	2200      	moveq	r2, #0
 80026d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d113      	bne.n	8002702 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	3b01      	subs	r3, #1
 80026fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d06e      	beq.n	80027e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d069      	beq.n	80027dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002708:	4b53      	ldr	r3, [pc, #332]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002714:	4b50      	ldr	r3, [pc, #320]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0ad      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002724:	4b4c      	ldr	r3, [pc, #304]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800272a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800272e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002730:	f7fe fc14 	bl	8000f5c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fc10 	bl	8000f5c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e09a      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274a:	4b43      	ldr	r3, [pc, #268]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002756:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b40      	ldr	r3, [pc, #256]	@ (800285c <HAL_RCC_OscConfig+0x784>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002766:	3a01      	subs	r2, #1
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002770:	0212      	lsls	r2, r2, #8
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002778:	0852      	lsrs	r2, r2, #1
 800277a:	3a01      	subs	r2, #1
 800277c:	0552      	lsls	r2, r2, #21
 800277e:	4311      	orrs	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002784:	0852      	lsrs	r2, r2, #1
 8002786:	3a01      	subs	r2, #1
 8002788:	0652      	lsls	r2, r2, #25
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002790:	0912      	lsrs	r2, r2, #4
 8002792:	0452      	lsls	r2, r2, #17
 8002794:	430a      	orrs	r2, r1
 8002796:	4930      	ldr	r1, [pc, #192]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002798:	4313      	orrs	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800279c:	4b2e      	ldr	r3, [pc, #184]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b4:	f7fe fbd2 	bl	8000f5c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fbce 	bl	8000f5c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e058      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027da:	e050      	b.n	800287e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e04f      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d148      	bne.n	800287e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f8:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002802:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002804:	f7fe fbaa 	bl	8000f5c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fba6 	bl	8000f5c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e030      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x734>
 800282a:	e028      	b.n	800287e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d023      	beq.n	800287a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <HAL_RCC_OscConfig+0x780>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe fb8d 	bl	8000f5c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	e00c      	b.n	8002860 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fb89 	bl	8000f5c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d905      	bls.n	8002860 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e013      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
 8002858:	40021000 	.word	0x40021000
 800285c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_RCC_OscConfig+0x7b0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ec      	bne.n	8002846 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_OscConfig+0x7b0>)
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4905      	ldr	r1, [pc, #20]	@ (8002888 <HAL_RCC_OscConfig+0x7b0>)
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x7b4>)
 8002874:	4013      	ands	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
 8002878:	e001      	b.n	800287e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	feeefffc 	.word	0xfeeefffc

08002890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0e7      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b75      	ldr	r3, [pc, #468]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b72      	ldr	r3, [pc, #456]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4970      	ldr	r1, [pc, #448]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b6e      	ldr	r3, [pc, #440]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cf      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d908      	bls.n	8002902 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4960      	ldr	r1, [pc, #384]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d04c      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	4b5a      	ldr	r3, [pc, #360]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d121      	bne.n	8002966 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0a6      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292e:	4b54      	ldr	r3, [pc, #336]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d115      	bne.n	8002966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e09a      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002946:	4b4e      	ldr	r3, [pc, #312]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e08e      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e086      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4b46      	ldr	r3, [pc, #280]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4943      	ldr	r1, [pc, #268]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002978:	f7fe faf0 	bl	8000f5c <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7fe faec 	bl	8000f5c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e06e      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b3a      	ldr	r3, [pc, #232]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 020c 	and.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1eb      	bne.n	8002980 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d010      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d208      	bcs.n	80029d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	492b      	ldr	r1, [pc, #172]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d6:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d210      	bcs.n	8002a06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e4:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0207 	bic.w	r2, r3, #7
 80029ec:	4923      	ldr	r1, [pc, #140]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f4:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <HAL_RCC_ClockConfig+0x1ec>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e036      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4918      	ldr	r1, [pc, #96]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4910      	ldr	r1, [pc, #64]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a44:	f000 f824 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	490b      	ldr	r1, [pc, #44]	@ (8002a84 <HAL_RCC_ClockConfig+0x1f4>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f8>)
 8002a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1fc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fa27 	bl	8000ebc <HAL_InitTick>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a72:	7afb      	ldrb	r3, [r7, #11]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08005344 	.word	0x08005344
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d121      	bne.n	8002b02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d11e      	bne.n	8002b02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac4:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e005      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aec:	4a2b      	ldr	r2, [pc, #172]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e004      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b14:	4b23      	ldr	r3, [pc, #140]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d134      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d003      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0xac>
 8002b34:	e005      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b38:	617b      	str	r3, [r7, #20]
      break;
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b3e:	617b      	str	r3, [r7, #20]
      break;
 8002b40:	e002      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	617b      	str	r3, [r7, #20]
      break;
 8002b46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	3301      	adds	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	fb03 f202 	mul.w	r2, r3, r2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	0e5b      	lsrs	r3, r3, #25
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b88:	69bb      	ldr	r3, [r7, #24]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	@ 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	0800535c 	.word	0x0800535c
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b03      	ldr	r3, [pc, #12]	@ (8002bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc4:	f7ff fff0 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4904      	ldr	r1, [pc, #16]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08005354 	.word	0x08005354

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bf0:	f7ff ffda 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0adb      	lsrs	r3, r3, #11
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4904      	ldr	r1, [pc, #16]	@ (8002c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08005354 	.word	0x08005354

08002c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c24:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c30:	f7ff f9ee 	bl	8002010 <HAL_PWREx_GetVoltageRange>
 8002c34:	6178      	str	r0, [r7, #20]
 8002c36:	e014      	b.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c38:	4b25      	ldr	r3, [pc, #148]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	4a24      	ldr	r2, [pc, #144]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c44:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c50:	f7ff f9de 	bl	8002010 <HAL_PWREx_GetVoltageRange>
 8002c54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c68:	d10b      	bne.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	@ 0x80
 8002c6e:	d919      	bls.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c74:	d902      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c76:	2302      	movs	r3, #2
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e013      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e010      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d902      	bls.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c88:	2303      	movs	r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	e00a      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b80      	cmp	r3, #128	@ 0x80
 8002c92:	d102      	bne.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c94:	2302      	movs	r3, #2
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	e004      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b70      	cmp	r3, #112	@ 0x70
 8002c9e:	d101      	bne.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 0207 	bic.w	r2, r3, #7
 8002cac:	4909      	ldr	r1, [pc, #36]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb4:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40022000 	.word	0x40022000

08002cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d041      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cf8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cfc:	d02a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d02:	d824      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d0e:	d81e      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d18:	d010      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1a:	e018      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d1c:	4b86      	ldr	r3, [pc, #536]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a85      	ldr	r2, [pc, #532]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d28:	e015      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fabb 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3a:	e00c      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3320      	adds	r3, #32
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fba6 	bl	8003494 <RCCEx_PLLSAI2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	74fb      	strb	r3, [r7, #19]
      break;
 8002d52:	e000      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d5c:	4b76      	ldr	r3, [pc, #472]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d6a:	4973      	ldr	r1, [pc, #460]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d72:	e001      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d041      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d8c:	d02a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d92:	d824      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d9e:	d81e      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da8:	d010      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002daa:	e018      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dac:	4b62      	ldr	r3, [pc, #392]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a61      	ldr	r2, [pc, #388]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db8:	e015      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fa73 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dca:	e00c      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3320      	adds	r3, #32
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fb5e 	bl	8003494 <RCCEx_PLLSAI2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	74fb      	strb	r3, [r7, #19]
      break;
 8002de2:	e000      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dec:	4b52      	ldr	r3, [pc, #328]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfa:	494f      	ldr	r1, [pc, #316]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e02:	e001      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a0 	beq.w	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b41      	ldr	r3, [pc, #260]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	4a40      	ldr	r2, [pc, #256]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3a      	ldr	r2, [pc, #232]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e58:	f7fe f880 	bl	8000f5c <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e5e:	e009      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7fe f87c 	bl	8000f5c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	74fb      	strb	r3, [r7, #19]
        break;
 8002e72:	e005      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e74:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ef      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d15c      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e86:	4b2c      	ldr	r3, [pc, #176]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01f      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea4:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb0:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	4a20      	ldr	r2, [pc, #128]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed0:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f83b 	bl	8000f5c <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe f837 	bl	8000f5c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d902      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	74fb      	strb	r3, [r7, #19]
            break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ec      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f26:	4904      	ldr	r1, [pc, #16]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f44:	7c7b      	ldrb	r3, [r7, #17]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b9e      	ldr	r3, [pc, #632]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	4a9d      	ldr	r2, [pc, #628]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f62:	4b98      	ldr	r3, [pc, #608]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f70:	4994      	ldr	r1, [pc, #592]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f84:	4b8f      	ldr	r3, [pc, #572]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f023 020c 	bic.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f92:	498c      	ldr	r1, [pc, #560]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fa6:	4b87      	ldr	r3, [pc, #540]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	4983      	ldr	r1, [pc, #524]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	497b      	ldr	r1, [pc, #492]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fea:	4b76      	ldr	r3, [pc, #472]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff8:	4972      	ldr	r1, [pc, #456]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300c:	4b6d      	ldr	r3, [pc, #436]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	496a      	ldr	r1, [pc, #424]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302e:	4b65      	ldr	r3, [pc, #404]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	4961      	ldr	r1, [pc, #388]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003050:	4b5c      	ldr	r3, [pc, #368]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	4959      	ldr	r1, [pc, #356]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003072:	4b54      	ldr	r3, [pc, #336]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	4950      	ldr	r1, [pc, #320]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003094:	4b4b      	ldr	r3, [pc, #300]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	4948      	ldr	r1, [pc, #288]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030b6:	4b43      	ldr	r3, [pc, #268]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	493f      	ldr	r1, [pc, #252]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d028      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d8:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e6:	4937      	ldr	r1, [pc, #220]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030f6:	d106      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b32      	ldr	r3, [pc, #200]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a31      	ldr	r2, [pc, #196]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
 8003104:	e011      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800310e:	d10c      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f8c8 	bl	80032ac <RCCEx_PLLSAI1_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d028      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003136:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	491f      	ldr	r1, [pc, #124]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003154:	d106      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003156:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a1a      	ldr	r2, [pc, #104]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003160:	60d3      	str	r3, [r2, #12]
 8003162:	e011      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003168:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f899 	bl	80032ac <RCCEx_PLLSAI1_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d02b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	4908      	ldr	r1, [pc, #32]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031b2:	d109      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b4:	4b03      	ldr	r3, [pc, #12]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a02      	ldr	r2, [pc, #8]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031be:	60d3      	str	r3, [r2, #12]
 80031c0:	e014      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f867 	bl	80032ac <RCCEx_PLLSAI1_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02f      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f8:	4b2b      	ldr	r3, [pc, #172]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003206:	4928      	ldr	r1, [pc, #160]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003216:	d10d      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	2102      	movs	r1, #2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f844 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d014      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	74bb      	strb	r3, [r7, #18]
 8003232:	e011      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3320      	adds	r3, #32
 8003242:	2102      	movs	r1, #2
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f925 	bl	8003494 <RCCEx_PLLSAI2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003264:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003272:	490d      	ldr	r1, [pc, #52]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003286:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003296:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800329e:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ba:	4b75      	ldr	r3, [pc, #468]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032c6:	4b72      	ldr	r3, [pc, #456]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d10d      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
       ||
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032de:	4b6c      	ldr	r3, [pc, #432]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
       ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d047      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e044      	b.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d018      	beq.n	8003332 <RCCEx_PLLSAI1_Config+0x86>
 8003300:	2b03      	cmp	r3, #3
 8003302:	d825      	bhi.n	8003350 <RCCEx_PLLSAI1_Config+0xa4>
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <RCCEx_PLLSAI1_Config+0x62>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d009      	beq.n	8003320 <RCCEx_PLLSAI1_Config+0x74>
 800330c:	e020      	b.n	8003350 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330e:	4b60      	ldr	r3, [pc, #384]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e01a      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003320:	4b5b      	ldr	r3, [pc, #364]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e013      	b.n	800335a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003332:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333e:	4b54      	ldr	r3, [pc, #336]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334e:	e006      	b.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e004      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003366:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	430b      	orrs	r3, r1
 800337c:	4944      	ldr	r1, [pc, #272]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d17d      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003388:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a40      	ldr	r2, [pc, #256]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fd fde2 	bl	8000f5c <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800339c:	f7fd fdde 	bl	8000f5c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
        break;
 80033ae:	e005      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b0:	4b37      	ldr	r3, [pc, #220]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ef      	bne.n	800339c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d160      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d111      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c8:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68d2      	ldr	r2, [r2, #12]
 80033de:	0912      	lsrs	r2, r2, #4
 80033e0:	0452      	lsls	r2, r2, #17
 80033e2:	430a      	orrs	r2, r1
 80033e4:	492a      	ldr	r1, [pc, #168]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	610b      	str	r3, [r1, #16]
 80033ea:	e027      	b.n	800343c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d112      	bne.n	8003418 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f2:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	0211      	lsls	r1, r2, #8
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6912      	ldr	r2, [r2, #16]
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	3a01      	subs	r2, #1
 800340c:	0552      	lsls	r2, r2, #21
 800340e:	430a      	orrs	r2, r1
 8003410:	491f      	ldr	r1, [pc, #124]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	610b      	str	r3, [r1, #16]
 8003416:	e011      	b.n	800343c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003418:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003420:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6892      	ldr	r2, [r2, #8]
 8003428:	0211      	lsls	r1, r2, #8
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6952      	ldr	r2, [r2, #20]
 800342e:	0852      	lsrs	r2, r2, #1
 8003430:	3a01      	subs	r2, #1
 8003432:	0652      	lsls	r2, r2, #25
 8003434:	430a      	orrs	r2, r1
 8003436:	4916      	ldr	r1, [pc, #88]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003446:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fd88 	bl	8000f5c <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800344e:	e009      	b.n	8003464 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003450:	f7fd fd84 	bl	8000f5c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d902      	bls.n	8003464 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	73fb      	strb	r3, [r7, #15]
          break;
 8003462:	e005      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ef      	beq.n	8003450 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	4904      	ldr	r1, [pc, #16]	@ (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000

08003494 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a2:	4b6a      	ldr	r3, [pc, #424]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034ae:	4b67      	ldr	r3, [pc, #412]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10d      	bne.n	80034da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
       ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034c6:	4b61      	ldr	r3, [pc, #388]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
       ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d047      	beq.n	800356a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e044      	b.n	800356a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d018      	beq.n	800351a <RCCEx_PLLSAI2_Config+0x86>
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d825      	bhi.n	8003538 <RCCEx_PLLSAI2_Config+0xa4>
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d002      	beq.n	80034f6 <RCCEx_PLLSAI2_Config+0x62>
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d009      	beq.n	8003508 <RCCEx_PLLSAI2_Config+0x74>
 80034f4:	e020      	b.n	8003538 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034f6:	4b55      	ldr	r3, [pc, #340]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11d      	bne.n	800353e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003506:	e01a      	b.n	800353e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003508:	4b50      	ldr	r3, [pc, #320]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d116      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003518:	e013      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351a:	4b4c      	ldr	r3, [pc, #304]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003526:	4b49      	ldr	r3, [pc, #292]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003536:	e006      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e004      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
    }

    if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800354e:	4b3f      	ldr	r3, [pc, #252]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	430b      	orrs	r3, r1
 8003564:	4939      	ldr	r1, [pc, #228]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d167      	bne.n	8003640 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003570:	4b36      	ldr	r3, [pc, #216]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fd fcee 	bl	8000f5c <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003584:	f7fd fcea 	bl	8000f5c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
        break;
 8003596:	e005      	b.n	80035a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003598:	4b2c      	ldr	r3, [pc, #176]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ef      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d14a      	bne.n	8003640 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b0:	4b26      	ldr	r3, [pc, #152]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	0211      	lsls	r1, r2, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	0912      	lsrs	r2, r2, #4
 80035c8:	0452      	lsls	r2, r2, #17
 80035ca:	430a      	orrs	r2, r1
 80035cc:	491f      	ldr	r1, [pc, #124]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	614b      	str	r3, [r1, #20]
 80035d2:	e011      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6912      	ldr	r2, [r2, #16]
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0652      	lsls	r2, r2, #25
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4916      	ldr	r1, [pc, #88]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a13      	ldr	r2, [pc, #76]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003602:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd fcaa 	bl	8000f5c <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360a:	e009      	b.n	8003620 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800360c:	f7fd fca6 	bl	8000f5c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d902      	bls.n	8003620 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	73fb      	strb	r3, [r7, #15]
          break;
 800361e:	e005      	b.n	800362c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4904      	ldr	r1, [pc, #16]	@ (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	4313      	orrs	r3, r2
 800363e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e040      	b.n	80036e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fac2 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fedc 	bl	8004454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fc21 	bl	8003ee4 <UART_SetConfig>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e01b      	b.n	80036e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 ff5b 	bl	8004598 <UART_CheckIdleState>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003700:	2b20      	cmp	r3, #32
 8003702:	d177      	bne.n	80037f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Transmit+0x24>
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e070      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2221      	movs	r2, #33	@ 0x21
 8003720:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003722:	f7fd fc1b 	bl	8000f5c <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x68>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800375c:	e02f      	b.n	80037be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 ffbd 	bl	80046e8 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e03b      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003790:	b292      	uxth	r2, r2
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	3302      	adds	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e007      	b.n	80037ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1c9      	bne.n	800375e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2140      	movs	r1, #64	@ 0x40
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 ff87 	bl	80046e8 <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e005      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003814:	2b20      	cmp	r3, #32
 8003816:	d137      	bne.n	8003888 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Receive_IT+0x24>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e030      	b.n	800388a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_UART_Receive_IT+0x94>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01f      	beq.n	8003878 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	613b      	str	r3, [r7, #16]
   return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	69f9      	ldr	r1, [r7, #28]
 800386a:	6a3a      	ldr	r2, [r7, #32]
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	61bb      	str	r3, [r7, #24]
   return(result);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e6      	bne.n	8003846 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	461a      	mov	r2, r3
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 ffa0 	bl	80047c4 <UART_Start_Receive_IT>
 8003884:	4603      	mov	r3, r0
 8003886:	e000      	b.n	800388a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3728      	adds	r7, #40	@ 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40008000 	.word	0x40008000

08003898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b0ba      	sub	sp, #232	@ 0xe8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80038c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038c6:	4013      	ands	r3, r2
 80038c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d115      	bne.n	8003900 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00f      	beq.n	8003900 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 82ca 	beq.w	8003e8a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
      }
      return;
 80038fe:	e2c4      	b.n	8003e8a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8117 	beq.w	8003b38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800390a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800391a:	4b85      	ldr	r3, [pc, #532]	@ (8003b30 <HAL_UART_IRQHandler+0x298>)
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 810a 	beq.w	8003b38 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d011      	beq.n	8003954 <HAL_UART_IRQHandler+0xbc>
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2201      	movs	r2, #1
 8003942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d011      	beq.n	8003984 <HAL_UART_IRQHandler+0xec>
 8003960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2202      	movs	r2, #2
 8003972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d011      	beq.n	80039b4 <HAL_UART_IRQHandler+0x11c>
 8003990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039aa:	f043 0202 	orr.w	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2208      	movs	r2, #8
 80039de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e6:	f043 0208 	orr.w	r2, r3, #8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d012      	beq.n	8003a22 <HAL_UART_IRQHandler+0x18a>
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8230 	beq.w	8003e8e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d04f      	beq.n	8003b1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 ff68 	bl	8004950 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b40      	cmp	r3, #64	@ 0x40
 8003a8c:	d141      	bne.n	8003b12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003aba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1d9      	bne.n	8003a8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d013      	beq.n	8003b0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae6:	4a13      	ldr	r2, [pc, #76]	@ (8003b34 <HAL_UART_IRQHandler+0x29c>)
 8003ae8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fbb3 	bl	800125a <HAL_DMA_Abort_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d017      	beq.n	8003b2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b04:	4610      	mov	r0, r2
 8003b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e00f      	b.n	8003b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f9d4 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	e00b      	b.n	8003b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9d0 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	e007      	b.n	8003b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9cc 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003b28:	e1b1      	b.n	8003e8e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2a:	bf00      	nop
    return;
 8003b2c:	e1af      	b.n	8003e8e <HAL_UART_IRQHandler+0x5f6>
 8003b2e:	bf00      	nop
 8003b30:	04000120 	.word	0x04000120
 8003b34:	08004a19 	.word	0x08004a19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 816a 	bne.w	8003e16 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8163 	beq.w	8003e16 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 815c 	beq.w	8003e16 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	f040 80d4 	bne.w	8003d1e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80ad 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b96:	429a      	cmp	r2, r3
 8003b98:	f080 80a5 	bcs.w	8003ce6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8086 	bne.w	8003cc4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003be2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003be6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1da      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3308      	adds	r3, #8
 8003c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e1      	bne.n	8003c02 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e3      	bne.n	8003c3e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c94:	f023 0310 	bic.w	r3, r3, #16
 8003c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ca8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e4      	bne.n	8003c84 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd fa8d 	bl	80011de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8f4 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ce4:	e0d5      	b.n	8003e92 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f040 80ce 	bne.w	8003e92 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	f040 80c5 	bne.w	8003e92 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8d8 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
      return;
 8003d1c:	e0b9      	b.n	8003e92 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80ab 	beq.w	8003e96 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a6 	beq.w	8003e96 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e4      	bne.n	8003d4a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003da4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e3      	bne.n	8003d80 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0310 	bic.w	r3, r3, #16
 8003de0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	69b9      	ldr	r1, [r7, #24]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e4      	bne.n	8003dcc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f85c 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e14:	e03f      	b.n	8003e96 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <HAL_UART_IRQHandler+0x5a8>
 8003e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 ffe9 	bl	8004e10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e3e:	e02d      	b.n	8003e9c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01c      	beq.n	8003e9a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
    }
    return;
 8003e68:	e017      	b.n	8003e9a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_UART_IRQHandler+0x604>
 8003e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fdde 	bl	8004a44 <UART_EndTransmit_IT>
    return;
 8003e88:	e008      	b.n	8003e9c <HAL_UART_IRQHandler+0x604>
      return;
 8003e8a:	bf00      	nop
 8003e8c:	e006      	b.n	8003e9c <HAL_UART_IRQHandler+0x604>
    return;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <HAL_UART_IRQHandler+0x604>
      return;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <HAL_UART_IRQHandler+0x604>
      return;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_UART_IRQHandler+0x604>
    return;
 8003e9a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e9c:	37e8      	adds	r7, #232	@ 0xe8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop

08003ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b08a      	sub	sp, #40	@ 0x28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4ba4      	ldr	r3, [pc, #656]	@ (80041a4 <UART_SetConfig+0x2c0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a99      	ldr	r2, [pc, #612]	@ (80041a8 <UART_SetConfig+0x2c4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f60:	430a      	orrs	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a90      	ldr	r2, [pc, #576]	@ (80041ac <UART_SetConfig+0x2c8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d126      	bne.n	8003fbc <UART_SetConfig+0xd8>
 8003f6e:	4b90      	ldr	r3, [pc, #576]	@ (80041b0 <UART_SetConfig+0x2cc>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d81b      	bhi.n	8003fb4 <UART_SetConfig+0xd0>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <UART_SetConfig+0xa0>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003fa5 	.word	0x08003fa5
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003fad 	.word	0x08003fad
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9a:	e116      	b.n	80041ca <UART_SetConfig+0x2e6>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e112      	b.n	80041ca <UART_SetConfig+0x2e6>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e10e      	b.n	80041ca <UART_SetConfig+0x2e6>
 8003fac:	2308      	movs	r3, #8
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e10a      	b.n	80041ca <UART_SetConfig+0x2e6>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e106      	b.n	80041ca <UART_SetConfig+0x2e6>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a7c      	ldr	r2, [pc, #496]	@ (80041b4 <UART_SetConfig+0x2d0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d138      	bne.n	8004038 <UART_SetConfig+0x154>
 8003fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80041b0 <UART_SetConfig+0x2cc>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d82d      	bhi.n	8004030 <UART_SetConfig+0x14c>
 8003fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fdc <UART_SetConfig+0xf8>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004031 	.word	0x08004031
 8003fe4:	08004031 	.word	0x08004031
 8003fe8:	08004031 	.word	0x08004031
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004031 	.word	0x08004031
 8003ff4:	08004031 	.word	0x08004031
 8003ff8:	08004031 	.word	0x08004031
 8003ffc:	08004019 	.word	0x08004019
 8004000:	08004031 	.word	0x08004031
 8004004:	08004031 	.word	0x08004031
 8004008:	08004031 	.word	0x08004031
 800400c:	08004029 	.word	0x08004029
 8004010:	2300      	movs	r3, #0
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e0d8      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004018:	2302      	movs	r3, #2
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e0d4      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004020:	2304      	movs	r3, #4
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004026:	e0d0      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004028:	2308      	movs	r3, #8
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402e:	e0cc      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004030:	2310      	movs	r3, #16
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004036:	e0c8      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5e      	ldr	r2, [pc, #376]	@ (80041b8 <UART_SetConfig+0x2d4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d125      	bne.n	800408e <UART_SetConfig+0x1aa>
 8004042:	4b5b      	ldr	r3, [pc, #364]	@ (80041b0 <UART_SetConfig+0x2cc>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800404c:	2b30      	cmp	r3, #48	@ 0x30
 800404e:	d016      	beq.n	800407e <UART_SetConfig+0x19a>
 8004050:	2b30      	cmp	r3, #48	@ 0x30
 8004052:	d818      	bhi.n	8004086 <UART_SetConfig+0x1a2>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d00a      	beq.n	800406e <UART_SetConfig+0x18a>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d814      	bhi.n	8004086 <UART_SetConfig+0x1a2>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <UART_SetConfig+0x182>
 8004060:	2b10      	cmp	r3, #16
 8004062:	d008      	beq.n	8004076 <UART_SetConfig+0x192>
 8004064:	e00f      	b.n	8004086 <UART_SetConfig+0x1a2>
 8004066:	2300      	movs	r3, #0
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406c:	e0ad      	b.n	80041ca <UART_SetConfig+0x2e6>
 800406e:	2302      	movs	r3, #2
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004074:	e0a9      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004076:	2304      	movs	r3, #4
 8004078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407c:	e0a5      	b.n	80041ca <UART_SetConfig+0x2e6>
 800407e:	2308      	movs	r3, #8
 8004080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004084:	e0a1      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004086:	2310      	movs	r3, #16
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408c:	e09d      	b.n	80041ca <UART_SetConfig+0x2e6>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a4a      	ldr	r2, [pc, #296]	@ (80041bc <UART_SetConfig+0x2d8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d125      	bne.n	80040e4 <UART_SetConfig+0x200>
 8004098:	4b45      	ldr	r3, [pc, #276]	@ (80041b0 <UART_SetConfig+0x2cc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040a4:	d016      	beq.n	80040d4 <UART_SetConfig+0x1f0>
 80040a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80040a8:	d818      	bhi.n	80040dc <UART_SetConfig+0x1f8>
 80040aa:	2b80      	cmp	r3, #128	@ 0x80
 80040ac:	d00a      	beq.n	80040c4 <UART_SetConfig+0x1e0>
 80040ae:	2b80      	cmp	r3, #128	@ 0x80
 80040b0:	d814      	bhi.n	80040dc <UART_SetConfig+0x1f8>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <UART_SetConfig+0x1d8>
 80040b6:	2b40      	cmp	r3, #64	@ 0x40
 80040b8:	d008      	beq.n	80040cc <UART_SetConfig+0x1e8>
 80040ba:	e00f      	b.n	80040dc <UART_SetConfig+0x1f8>
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c2:	e082      	b.n	80041ca <UART_SetConfig+0x2e6>
 80040c4:	2302      	movs	r3, #2
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ca:	e07e      	b.n	80041ca <UART_SetConfig+0x2e6>
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d2:	e07a      	b.n	80041ca <UART_SetConfig+0x2e6>
 80040d4:	2308      	movs	r3, #8
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040da:	e076      	b.n	80041ca <UART_SetConfig+0x2e6>
 80040dc:	2310      	movs	r3, #16
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e072      	b.n	80041ca <UART_SetConfig+0x2e6>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a35      	ldr	r2, [pc, #212]	@ (80041c0 <UART_SetConfig+0x2dc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d12a      	bne.n	8004144 <UART_SetConfig+0x260>
 80040ee:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <UART_SetConfig+0x2cc>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040fc:	d01a      	beq.n	8004134 <UART_SetConfig+0x250>
 80040fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004102:	d81b      	bhi.n	800413c <UART_SetConfig+0x258>
 8004104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004108:	d00c      	beq.n	8004124 <UART_SetConfig+0x240>
 800410a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800410e:	d815      	bhi.n	800413c <UART_SetConfig+0x258>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <UART_SetConfig+0x238>
 8004114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004118:	d008      	beq.n	800412c <UART_SetConfig+0x248>
 800411a:	e00f      	b.n	800413c <UART_SetConfig+0x258>
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004122:	e052      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004124:	2302      	movs	r3, #2
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412a:	e04e      	b.n	80041ca <UART_SetConfig+0x2e6>
 800412c:	2304      	movs	r3, #4
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004132:	e04a      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004134:	2308      	movs	r3, #8
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e046      	b.n	80041ca <UART_SetConfig+0x2e6>
 800413c:	2310      	movs	r3, #16
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e042      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <UART_SetConfig+0x2c4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d13a      	bne.n	80041c4 <UART_SetConfig+0x2e0>
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <UART_SetConfig+0x2cc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800415c:	d01a      	beq.n	8004194 <UART_SetConfig+0x2b0>
 800415e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004162:	d81b      	bhi.n	800419c <UART_SetConfig+0x2b8>
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004168:	d00c      	beq.n	8004184 <UART_SetConfig+0x2a0>
 800416a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800416e:	d815      	bhi.n	800419c <UART_SetConfig+0x2b8>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <UART_SetConfig+0x298>
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004178:	d008      	beq.n	800418c <UART_SetConfig+0x2a8>
 800417a:	e00f      	b.n	800419c <UART_SetConfig+0x2b8>
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004182:	e022      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004184:	2302      	movs	r3, #2
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e01e      	b.n	80041ca <UART_SetConfig+0x2e6>
 800418c:	2304      	movs	r3, #4
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e01a      	b.n	80041ca <UART_SetConfig+0x2e6>
 8004194:	2308      	movs	r3, #8
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419a:	e016      	b.n	80041ca <UART_SetConfig+0x2e6>
 800419c:	2310      	movs	r3, #16
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a2:	e012      	b.n	80041ca <UART_SetConfig+0x2e6>
 80041a4:	efff69f3 	.word	0xefff69f3
 80041a8:	40008000 	.word	0x40008000
 80041ac:	40013800 	.word	0x40013800
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40004400 	.word	0x40004400
 80041b8:	40004800 	.word	0x40004800
 80041bc:	40004c00 	.word	0x40004c00
 80041c0:	40005000 	.word	0x40005000
 80041c4:	2310      	movs	r3, #16
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a9f      	ldr	r2, [pc, #636]	@ (800444c <UART_SetConfig+0x568>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d17a      	bne.n	80042ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d824      	bhi.n	8004226 <UART_SetConfig+0x342>
 80041dc:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <UART_SetConfig+0x300>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004217 	.word	0x08004217
 80041f8:	08004227 	.word	0x08004227
 80041fc:	08004227 	.word	0x08004227
 8004200:	08004227 	.word	0x08004227
 8004204:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004208:	f7fe fcda 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 800420c:	61f8      	str	r0, [r7, #28]
        break;
 800420e:	e010      	b.n	8004232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b8f      	ldr	r3, [pc, #572]	@ (8004450 <UART_SetConfig+0x56c>)
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e00d      	b.n	8004232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fe fc3b 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 800421a:	61f8      	str	r0, [r7, #28]
        break;
 800421c:	e009      	b.n	8004232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e005      	b.n	8004232 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80fb 	beq.w	8004430 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	429a      	cmp	r2, r3
 8004248:	d305      	bcc.n	8004256 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	429a      	cmp	r2, r3
 8004254:	d903      	bls.n	800425e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800425c:	e0e8      	b.n	8004430 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	2200      	movs	r2, #0
 8004262:	461c      	mov	r4, r3
 8004264:	4615      	mov	r5, r2
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	022b      	lsls	r3, r5, #8
 8004270:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004274:	0222      	lsls	r2, r4, #8
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	6849      	ldr	r1, [r1, #4]
 800427a:	0849      	lsrs	r1, r1, #1
 800427c:	2000      	movs	r0, #0
 800427e:	4688      	mov	r8, r1
 8004280:	4681      	mov	r9, r0
 8004282:	eb12 0a08 	adds.w	sl, r2, r8
 8004286:	eb43 0b09 	adc.w	fp, r3, r9
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004298:	4650      	mov	r0, sl
 800429a:	4659      	mov	r1, fp
 800429c:	f7fb ff94 	bl	80001c8 <__aeabi_uldivmod>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4613      	mov	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ae:	d308      	bcc.n	80042c2 <UART_SetConfig+0x3de>
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b6:	d204      	bcs.n	80042c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	60da      	str	r2, [r3, #12]
 80042c0:	e0b6      	b.n	8004430 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042c8:	e0b2      	b.n	8004430 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d2:	d15e      	bne.n	8004392 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d828      	bhi.n	800432e <UART_SetConfig+0x44a>
 80042dc:	a201      	add	r2, pc, #4	@ (adr r2, 80042e4 <UART_SetConfig+0x400>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004319 	.word	0x08004319
 80042f0:	0800432f 	.word	0x0800432f
 80042f4:	0800431f 	.word	0x0800431f
 80042f8:	0800432f 	.word	0x0800432f
 80042fc:	0800432f 	.word	0x0800432f
 8004300:	0800432f 	.word	0x0800432f
 8004304:	08004327 	.word	0x08004327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004308:	f7fe fc5a 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 800430c:	61f8      	str	r0, [r7, #28]
        break;
 800430e:	e014      	b.n	800433a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004310:	f7fe fc6c 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004314:	61f8      	str	r0, [r7, #28]
        break;
 8004316:	e010      	b.n	800433a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004318:	4b4d      	ldr	r3, [pc, #308]	@ (8004450 <UART_SetConfig+0x56c>)
 800431a:	61fb      	str	r3, [r7, #28]
        break;
 800431c:	e00d      	b.n	800433a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431e:	f7fe fbb7 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8004322:	61f8      	str	r0, [r7, #28]
        break;
 8004324:	e009      	b.n	800433a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432a:	61fb      	str	r3, [r7, #28]
        break;
 800432c:	e005      	b.n	800433a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d077      	beq.n	8004430 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005a      	lsls	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	441a      	add	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b0f      	cmp	r3, #15
 800435a:	d916      	bls.n	800438a <UART_SetConfig+0x4a6>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004362:	d212      	bcs.n	800438a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f023 030f 	bic.w	r3, r3, #15
 800436c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	b29a      	uxth	r2, r3
 800437a:	8afb      	ldrh	r3, [r7, #22]
 800437c:	4313      	orrs	r3, r2
 800437e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	8afa      	ldrh	r2, [r7, #22]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e052      	b.n	8004430 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004390:	e04e      	b.n	8004430 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004392:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004396:	2b08      	cmp	r3, #8
 8004398:	d827      	bhi.n	80043ea <UART_SetConfig+0x506>
 800439a:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <UART_SetConfig+0x4bc>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043cd 	.word	0x080043cd
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	080043eb 	.word	0x080043eb
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043eb 	.word	0x080043eb
 80043b8:	080043eb 	.word	0x080043eb
 80043bc:	080043eb 	.word	0x080043eb
 80043c0:	080043e3 	.word	0x080043e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fbfc 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
        break;
 80043ca:	e014      	b.n	80043f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043cc:	f7fe fc0e 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80043d0:	61f8      	str	r0, [r7, #28]
        break;
 80043d2:	e010      	b.n	80043f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004450 <UART_SetConfig+0x56c>)
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e00d      	b.n	80043f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fe fb59 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 80043de:	61f8      	str	r0, [r7, #28]
        break;
 80043e0:	e009      	b.n	80043f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e6:	61fb      	str	r3, [r7, #28]
        break;
 80043e8:	e005      	b.n	80043f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043f4:	bf00      	nop
    }

    if (pclk != 0U)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d019      	beq.n	8004430 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	085a      	lsrs	r2, r3, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	441a      	add	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b0f      	cmp	r3, #15
 8004414:	d909      	bls.n	800442a <UART_SetConfig+0x546>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441c:	d205      	bcs.n	800442a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60da      	str	r2, [r3, #12]
 8004428:	e002      	b.n	8004430 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800443c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004440:	4618      	mov	r0, r3
 8004442:	3728      	adds	r7, #40	@ 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	40008000 	.word	0x40008000
 8004450:	00f42400 	.word	0x00f42400

08004454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004552:	d10a      	bne.n	800456a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b098      	sub	sp, #96	@ 0x60
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a8:	f7fc fcd8 	bl	8000f5c <HAL_GetTick>
 80045ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d12e      	bne.n	800461a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c4:	2200      	movs	r2, #0
 80045c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f88c 	bl	80046e8 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d021      	beq.n	800461a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e6      	bne.n	80045d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e062      	b.n	80046e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d149      	bne.n	80046bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004628:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004630:	2200      	movs	r2, #0
 8004632:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f856 	bl	80046e8 <UART_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03c      	beq.n	80046bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	623b      	str	r3, [r7, #32]
   return(result);
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30
 8004662:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	60fb      	str	r3, [r7, #12]
   return(result);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3308      	adds	r3, #8
 8004692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004694:	61fa      	str	r2, [r7, #28]
 8004696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	617b      	str	r3, [r7, #20]
   return(result);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e011      	b.n	80046e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3758      	adds	r7, #88	@ 0x58
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f8:	e04f      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d04b      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004702:	f7fc fc2b 	bl	8000f5c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <UART_WaitOnFlagUntilTimeout+0x30>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e04e      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d037      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0xb2>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d034      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b40      	cmp	r3, #64	@ 0x40
 8004734:	d031      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b08      	cmp	r3, #8
 8004742:	d110      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2208      	movs	r2, #8
 800474a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f8ff 	bl	8004950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2208      	movs	r2, #8
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e029      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004774:	d111      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800477e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8e5 	bl	8004950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e00f      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d0a0      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b097      	sub	sp, #92	@ 0x5c
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f6:	d10e      	bne.n	8004816 <UART_Start_Receive_IT+0x52>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <UART_Start_Receive_IT+0x48>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004806:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800480a:	e02d      	b.n	8004868 <UART_Start_Receive_IT+0xa4>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	22ff      	movs	r2, #255	@ 0xff
 8004810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004814:	e028      	b.n	8004868 <UART_Start_Receive_IT+0xa4>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10d      	bne.n	800483a <UART_Start_Receive_IT+0x76>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <UART_Start_Receive_IT+0x6c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22ff      	movs	r2, #255	@ 0xff
 800482a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800482e:	e01b      	b.n	8004868 <UART_Start_Receive_IT+0xa4>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	227f      	movs	r2, #127	@ 0x7f
 8004834:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004838:	e016      	b.n	8004868 <UART_Start_Receive_IT+0xa4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004842:	d10d      	bne.n	8004860 <UART_Start_Receive_IT+0x9c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <UART_Start_Receive_IT+0x92>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	227f      	movs	r2, #127	@ 0x7f
 8004850:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004854:	e008      	b.n	8004868 <UART_Start_Receive_IT+0xa4>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	223f      	movs	r2, #63	@ 0x3f
 800485a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800485e:	e003      	b.n	8004868 <UART_Start_Receive_IT+0xa4>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2222      	movs	r2, #34	@ 0x22
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3308      	adds	r3, #8
 8004896:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004898:	64ba      	str	r2, [r7, #72]	@ 0x48
 800489a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800489e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80048a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b4:	d107      	bne.n	80048c6 <UART_Start_Receive_IT+0x102>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a21      	ldr	r2, [pc, #132]	@ (8004948 <UART_Start_Receive_IT+0x184>)
 80048c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80048c4:	e002      	b.n	80048cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a20      	ldr	r2, [pc, #128]	@ (800494c <UART_Start_Receive_IT+0x188>)
 80048ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d019      	beq.n	8004908 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80048e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e6      	bne.n	80048d4 <UART_Start_Receive_IT+0x110>
 8004906:	e018      	b.n	800493a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	613b      	str	r3, [r7, #16]
   return(result);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f043 0320 	orr.w	r3, r3, #32
 800491c:	653b      	str	r3, [r7, #80]	@ 0x50
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	69f9      	ldr	r1, [r7, #28]
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	61bb      	str	r3, [r7, #24]
   return(result);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	375c      	adds	r7, #92	@ 0x5c
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	08004c55 	.word	0x08004c55
 800494c:	08004a99 	.word	0x08004a99

08004950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b095      	sub	sp, #84	@ 0x54
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800496c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004976:	643b      	str	r3, [r7, #64]	@ 0x40
 8004978:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800497c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	61fb      	str	r3, [r7, #28]
   return(result);
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d118      	bne.n	80049f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f023 0310 	bic.w	r3, r3, #16
 80049da:	647b      	str	r3, [r7, #68]	@ 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6979      	ldr	r1, [r7, #20]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	613b      	str	r3, [r7, #16]
   return(result);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e6      	bne.n	80049c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a0c:	bf00      	nop
 8004a0e:	3754      	adds	r7, #84	@ 0x54
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fa3e 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	613b      	str	r3, [r7, #16]
   return(result);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fa0a 	bl	8003ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a90:	bf00      	nop
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b09c      	sub	sp, #112	@ 0x70
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004aa6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab0:	2b22      	cmp	r3, #34	@ 0x22
 8004ab2:	f040 80be 	bne.w	8004c32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004abc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ac0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ac4:	b2d9      	uxtb	r1, r3
 8004ac6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80a3 	bne.w	8004c46 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b52:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a34      	ldr	r2, [pc, #208]	@ (8004c50 <UART_RxISR_8BIT+0x1b8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01f      	beq.n	8004bc4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ba6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d12e      	bne.n	8004c2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0310 	bic.w	r3, r3, #16
 8004be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d103      	bne.n	8004c1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2210      	movs	r2, #16
 8004c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff f952 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c28:	e00d      	b.n	8004c46 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fb fc44 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8004c30:	e009      	b.n	8004c46 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	8b1b      	ldrh	r3, [r3, #24]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	b292      	uxth	r2, r2
 8004c44:	831a      	strh	r2, [r3, #24]
}
 8004c46:	bf00      	nop
 8004c48:	3770      	adds	r7, #112	@ 0x70
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40008000 	.word	0x40008000

08004c54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b09c      	sub	sp, #112	@ 0x70
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c6c:	2b22      	cmp	r3, #34	@ 0x22
 8004c6e:	f040 80be 	bne.w	8004dee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004c86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 80a3 	bne.w	8004e02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cdc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ce0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e5      	bne.n	8004cee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a34      	ldr	r2, [pc, #208]	@ (8004e0c <UART_RxISR_16BIT+0x1b8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01f      	beq.n	8004d80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e6      	bne.n	8004d4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d12e      	bne.n	8004de6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f023 0310 	bic.w	r3, r3, #16
 8004da2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d103      	bne.n	8004dd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff f874 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004de4:	e00d      	b.n	8004e02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fb fb66 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8004dec:	e009      	b.n	8004e02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	8b1b      	ldrh	r3, [r3, #24]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	b292      	uxth	r2, r2
 8004e00:	831a      	strh	r2, [r3, #24]
}
 8004e02:	bf00      	nop
 8004e04:	3770      	adds	r7, #112	@ 0x70
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40008000 	.word	0x40008000

08004e10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af04      	add	r7, sp, #16
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	9302      	str	r3, [sp, #8]
 8004e44:	2301      	movs	r3, #1
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	1dfb      	adds	r3, r7, #7
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2178      	movs	r1, #120	@ 0x78
 8004e52:	4803      	ldr	r0, [pc, #12]	@ (8004e60 <ssd1306_WriteCommand+0x2c>)
 8004e54:	f7fc fcc2 	bl	80017dc <HAL_I2C_Mem_Write>
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000028 	.word	0x20000028

08004e64 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af04      	add	r7, sp, #16
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	9202      	str	r2, [sp, #8]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	2240      	movs	r2, #64	@ 0x40
 8004e82:	2178      	movs	r1, #120	@ 0x78
 8004e84:	4803      	ldr	r0, [pc, #12]	@ (8004e94 <ssd1306_WriteData+0x30>)
 8004e86:	f7fc fca9 	bl	80017dc <HAL_I2C_Mem_Write>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000028 	.word	0x20000028

08004e98 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004e9c:	f7ff ffc2 	bl	8004e24 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004ea0:	2064      	movs	r0, #100	@ 0x64
 8004ea2:	f7fc f867 	bl	8000f74 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f000 f9d6 	bl	8005258 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004eac:	2020      	movs	r0, #32
 8004eae:	f7ff ffc1 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7ff ffbe 	bl	8004e34 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004eb8:	20b0      	movs	r0, #176	@ 0xb0
 8004eba:	f7ff ffbb 	bl	8004e34 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004ebe:	20c8      	movs	r0, #200	@ 0xc8
 8004ec0:	f7ff ffb8 	bl	8004e34 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7ff ffb5 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004eca:	2010      	movs	r0, #16
 8004ecc:	f7ff ffb2 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004ed0:	2040      	movs	r0, #64	@ 0x40
 8004ed2:	f7ff ffaf 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004ed6:	20ff      	movs	r0, #255	@ 0xff
 8004ed8:	f000 f9aa 	bl	8005230 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004edc:	20a1      	movs	r0, #161	@ 0xa1
 8004ede:	f7ff ffa9 	bl	8004e34 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004ee2:	20a6      	movs	r0, #166	@ 0xa6
 8004ee4:	f7ff ffa6 	bl	8004e34 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004ee8:	20a8      	movs	r0, #168	@ 0xa8
 8004eea:	f7ff ffa3 	bl	8004e34 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004eee:	203f      	movs	r0, #63	@ 0x3f
 8004ef0:	f7ff ffa0 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004ef4:	20a4      	movs	r0, #164	@ 0xa4
 8004ef6:	f7ff ff9d 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004efa:	20d3      	movs	r0, #211	@ 0xd3
 8004efc:	f7ff ff9a 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7ff ff97 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004f06:	20d5      	movs	r0, #213	@ 0xd5
 8004f08:	f7ff ff94 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004f0c:	20f0      	movs	r0, #240	@ 0xf0
 8004f0e:	f7ff ff91 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004f12:	20d9      	movs	r0, #217	@ 0xd9
 8004f14:	f7ff ff8e 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004f18:	2022      	movs	r0, #34	@ 0x22
 8004f1a:	f7ff ff8b 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004f1e:	20da      	movs	r0, #218	@ 0xda
 8004f20:	f7ff ff88 	bl	8004e34 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004f24:	2012      	movs	r0, #18
 8004f26:	f7ff ff85 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004f2a:	20db      	movs	r0, #219	@ 0xdb
 8004f2c:	f7ff ff82 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004f30:	2020      	movs	r0, #32
 8004f32:	f7ff ff7f 	bl	8004e34 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004f36:	208d      	movs	r0, #141	@ 0x8d
 8004f38:	f7ff ff7c 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004f3c:	2014      	movs	r0, #20
 8004f3e:	f7ff ff79 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004f42:	2001      	movs	r0, #1
 8004f44:	f000 f988 	bl	8005258 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f000 f80f 	bl	8004f6c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004f4e:	f000 f825 	bl	8004f9c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004f52:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <ssd1306_Init+0xd0>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <ssd1306_Init+0xd0>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004f5e:	4b02      	ldr	r3, [pc, #8]	@ (8004f68 <ssd1306_Init+0xd0>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	711a      	strb	r2, [r3, #4]
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200005bc 	.word	0x200005bc

08004f6c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <ssd1306_Fill+0x14>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <ssd1306_Fill+0x16>
 8004f80:	23ff      	movs	r3, #255	@ 0xff
 8004f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f86:	4619      	mov	r1, r3
 8004f88:	4803      	ldr	r0, [pc, #12]	@ (8004f98 <ssd1306_Fill+0x2c>)
 8004f8a:	f000 f983 	bl	8005294 <memset>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200001bc 	.word	0x200001bc

08004f9c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	71fb      	strb	r3, [r7, #7]
 8004fa6:	e016      	b.n	8004fd6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	3b50      	subs	r3, #80	@ 0x50
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff ff40 	bl	8004e34 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7ff ff3d 	bl	8004e34 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004fba:	2010      	movs	r0, #16
 8004fbc:	f7ff ff3a 	bl	8004e34 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	01db      	lsls	r3, r3, #7
 8004fc4:	4a08      	ldr	r2, [pc, #32]	@ (8004fe8 <ssd1306_UpdateScreen+0x4c>)
 8004fc6:	4413      	add	r3, r2
 8004fc8:	2180      	movs	r1, #128	@ 0x80
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff4a 	bl	8004e64 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	71fb      	strb	r3, [r7, #7]
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	2b07      	cmp	r3, #7
 8004fda:	d9e5      	bls.n	8004fa8 <ssd1306_UpdateScreen+0xc>
    }
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200001bc 	.word	0x200001bc

08004fec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	71bb      	strb	r3, [r7, #6]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	2b00      	cmp	r3, #0
 8005004:	db3d      	blt.n	8005082 <ssd1306_DrawPixel+0x96>
 8005006:	79bb      	ldrb	r3, [r7, #6]
 8005008:	2b3f      	cmp	r3, #63	@ 0x3f
 800500a:	d83a      	bhi.n	8005082 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800500c:	797b      	ldrb	r3, [r7, #5]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d11a      	bne.n	8005048 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005012:	79fa      	ldrb	r2, [r7, #7]
 8005014:	79bb      	ldrb	r3, [r7, #6]
 8005016:	08db      	lsrs	r3, r3, #3
 8005018:	b2d8      	uxtb	r0, r3
 800501a:	4603      	mov	r3, r0
 800501c:	01db      	lsls	r3, r3, #7
 800501e:	4413      	add	r3, r2
 8005020:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <ssd1306_DrawPixel+0xa4>)
 8005022:	5cd3      	ldrb	r3, [r2, r3]
 8005024:	b25a      	sxtb	r2, r3
 8005026:	79bb      	ldrb	r3, [r7, #6]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	b25b      	sxtb	r3, r3
 8005034:	4313      	orrs	r3, r2
 8005036:	b259      	sxtb	r1, r3
 8005038:	79fa      	ldrb	r2, [r7, #7]
 800503a:	4603      	mov	r3, r0
 800503c:	01db      	lsls	r3, r3, #7
 800503e:	4413      	add	r3, r2
 8005040:	b2c9      	uxtb	r1, r1
 8005042:	4a13      	ldr	r2, [pc, #76]	@ (8005090 <ssd1306_DrawPixel+0xa4>)
 8005044:	54d1      	strb	r1, [r2, r3]
 8005046:	e01d      	b.n	8005084 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005048:	79fa      	ldrb	r2, [r7, #7]
 800504a:	79bb      	ldrb	r3, [r7, #6]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	b2d8      	uxtb	r0, r3
 8005050:	4603      	mov	r3, r0
 8005052:	01db      	lsls	r3, r3, #7
 8005054:	4413      	add	r3, r2
 8005056:	4a0e      	ldr	r2, [pc, #56]	@ (8005090 <ssd1306_DrawPixel+0xa4>)
 8005058:	5cd3      	ldrb	r3, [r2, r3]
 800505a:	b25a      	sxtb	r2, r3
 800505c:	79bb      	ldrb	r3, [r7, #6]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2101      	movs	r1, #1
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	b25b      	sxtb	r3, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	b25b      	sxtb	r3, r3
 800506e:	4013      	ands	r3, r2
 8005070:	b259      	sxtb	r1, r3
 8005072:	79fa      	ldrb	r2, [r7, #7]
 8005074:	4603      	mov	r3, r0
 8005076:	01db      	lsls	r3, r3, #7
 8005078:	4413      	add	r3, r2
 800507a:	b2c9      	uxtb	r1, r1
 800507c:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <ssd1306_DrawPixel+0xa4>)
 800507e:	54d1      	strb	r1, [r2, r3]
 8005080:	e000      	b.n	8005084 <ssd1306_DrawPixel+0x98>
        return;
 8005082:	bf00      	nop
    }
}
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	200001bc 	.word	0x200001bc

08005094 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b089      	sub	sp, #36	@ 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4638      	mov	r0, r7
 800509e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80050a2:	4623      	mov	r3, r4
 80050a4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b1f      	cmp	r3, #31
 80050aa:	d902      	bls.n	80050b2 <ssd1306_WriteChar+0x1e>
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80050b0:	d901      	bls.n	80050b6 <ssd1306_WriteChar+0x22>
        return 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e077      	b.n	80051a6 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80050b6:	4b3e      	ldr	r3, [pc, #248]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	783b      	ldrb	r3, [r7, #0]
 80050be:	4413      	add	r3, r2
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	dc06      	bgt.n	80050d2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80050c4:	4b3a      	ldr	r3, [pc, #232]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 80050c6:	885b      	ldrh	r3, [r3, #2]
 80050c8:	461a      	mov	r2, r3
 80050ca:	787b      	ldrb	r3, [r7, #1]
 80050cc:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	dd01      	ble.n	80050d6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e067      	b.n	80051a6 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	e04e      	b.n	800517a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	3b20      	subs	r3, #32
 80050e2:	7879      	ldrb	r1, [r7, #1]
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	440b      	add	r3, r1
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e036      	b.n	800516a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800510c:	4b28      	ldr	r3, [pc, #160]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	4413      	add	r3, r2
 8005118:	b2d8      	uxtb	r0, r3
 800511a:	4b25      	ldr	r3, [pc, #148]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 800511c:	885b      	ldrh	r3, [r3, #2]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4413      	add	r3, r2
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800512c:	4619      	mov	r1, r3
 800512e:	f7ff ff5d 	bl	8004fec <ssd1306_DrawPixel>
 8005132:	e017      	b.n	8005164 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005134:	4b1e      	ldr	r3, [pc, #120]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4413      	add	r3, r2
 8005140:	b2d8      	uxtb	r0, r3
 8005142:	4b1b      	ldr	r3, [pc, #108]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 8005144:	885b      	ldrh	r3, [r3, #2]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4413      	add	r3, r2
 800514e:	b2d9      	uxtb	r1, r3
 8005150:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	f7ff ff44 	bl	8004fec <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	3301      	adds	r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	783b      	ldrb	r3, [r7, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	4293      	cmp	r3, r2
 8005172:	d3c3      	bcc.n	80050fc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	787b      	ldrb	r3, [r7, #1]
 800517c:	461a      	mov	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4293      	cmp	r3, r2
 8005182:	d3ab      	bcc.n	80050dc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	2a00      	cmp	r2, #0
 800518c:	d005      	beq.n	800519a <ssd1306_WriteChar+0x106>
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	3a20      	subs	r2, #32
 8005194:	440a      	add	r2, r1
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	e000      	b.n	800519c <ssd1306_WriteChar+0x108>
 800519a:	783a      	ldrb	r2, [r7, #0]
 800519c:	4413      	add	r3, r2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	4b03      	ldr	r3, [pc, #12]	@ (80051b0 <ssd1306_WriteChar+0x11c>)
 80051a2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3724      	adds	r7, #36	@ 0x24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200005bc 	.word	0x200005bc

080051b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	4638      	mov	r0, r7
 80051be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80051c2:	e013      	b.n	80051ec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	7818      	ldrb	r0, [r3, #0]
 80051c8:	7e3b      	ldrb	r3, [r7, #24]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	463b      	mov	r3, r7
 80051ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051d0:	f7ff ff60 	bl	8005094 <ssd1306_WriteChar>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d002      	beq.n	80051e6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	e008      	b.n	80051f8 <ssd1306_WriteString+0x44>
        }
        str++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e7      	bne.n	80051c4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	781b      	ldrb	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	460a      	mov	r2, r1
 800520a:	71fb      	strb	r3, [r7, #7]
 800520c:	4613      	mov	r3, r2
 800520e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	b29a      	uxth	r2, r3
 8005214:	4b05      	ldr	r3, [pc, #20]	@ (800522c <ssd1306_SetCursor+0x2c>)
 8005216:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005218:	79bb      	ldrb	r3, [r7, #6]
 800521a:	b29a      	uxth	r2, r3
 800521c:	4b03      	ldr	r3, [pc, #12]	@ (800522c <ssd1306_SetCursor+0x2c>)
 800521e:	805a      	strh	r2, [r3, #2]
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	200005bc 	.word	0x200005bc

08005230 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800523a:	2381      	movs	r3, #129	@ 0x81
 800523c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fdf7 	bl	8004e34 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fdf3 	bl	8004e34 <ssd1306_WriteCommand>
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005268:	23af      	movs	r3, #175	@ 0xaf
 800526a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800526c:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <ssd1306_SetDisplayOn+0x38>)
 800526e:	2201      	movs	r2, #1
 8005270:	715a      	strb	r2, [r3, #5]
 8005272:	e004      	b.n	800527e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005274:	23ae      	movs	r3, #174	@ 0xae
 8005276:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <ssd1306_SetDisplayOn+0x38>)
 800527a:	2200      	movs	r2, #0
 800527c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fdd7 	bl	8004e34 <ssd1306_WriteCommand>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200005bc 	.word	0x200005bc

08005294 <memset>:
 8005294:	4402      	add	r2, r0
 8005296:	4603      	mov	r3, r0
 8005298:	4293      	cmp	r3, r2
 800529a:	d100      	bne.n	800529e <memset+0xa>
 800529c:	4770      	bx	lr
 800529e:	f803 1b01 	strb.w	r1, [r3], #1
 80052a2:	e7f9      	b.n	8005298 <memset+0x4>

080052a4 <__libc_init_array>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4d0d      	ldr	r5, [pc, #52]	@ (80052dc <__libc_init_array+0x38>)
 80052a8:	4c0d      	ldr	r4, [pc, #52]	@ (80052e0 <__libc_init_array+0x3c>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	2600      	movs	r6, #0
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	d109      	bne.n	80052c8 <__libc_init_array+0x24>
 80052b4:	4d0b      	ldr	r5, [pc, #44]	@ (80052e4 <__libc_init_array+0x40>)
 80052b6:	4c0c      	ldr	r4, [pc, #48]	@ (80052e8 <__libc_init_array+0x44>)
 80052b8:	f000 f818 	bl	80052ec <_init>
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	2600      	movs	r6, #0
 80052c2:	42a6      	cmp	r6, r4
 80052c4:	d105      	bne.n	80052d2 <__libc_init_array+0x2e>
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052cc:	4798      	blx	r3
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7ee      	b.n	80052b0 <__libc_init_array+0xc>
 80052d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d6:	4798      	blx	r3
 80052d8:	3601      	adds	r6, #1
 80052da:	e7f2      	b.n	80052c2 <__libc_init_array+0x1e>
 80052dc:	08005990 	.word	0x08005990
 80052e0:	08005990 	.word	0x08005990
 80052e4:	08005990 	.word	0x08005990
 80052e8:	08005994 	.word	0x08005994

080052ec <_init>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr

080052f8 <_fini>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr
