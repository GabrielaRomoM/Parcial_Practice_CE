
Parcial_Practice_CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003498  08003498  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003498  08003498  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003498  08003498  00004498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800349c  0800349c  0000449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  2000000c  080034ac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080034ac  0000559c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f242  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002194  00000000  00000000  0001427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00016418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e4  00000000  00000000  000170e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dd2  00000000  00000000  00017acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104df  00000000  00000000  0003d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ead07  00000000  00000000  0004dd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003474  00000000  00000000  00138ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013bf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e40 	.word	0x08002e40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e40 	.word	0x08002e40

080001c8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000200 <HAL_UART_RxCpltCallback+0x38>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d104      	bne.n	80001e4 <HAL_UART_RxCpltCallback+0x1c>
		//ring_buffer_write(data);
		HAL_UART_Receive_IT(&huart1, &data,1);
 80001da:	2201      	movs	r2, #1
 80001dc:	4909      	ldr	r1, [pc, #36]	@ (8000204 <HAL_UART_RxCpltCallback+0x3c>)
 80001de:	480a      	ldr	r0, [pc, #40]	@ (8000208 <HAL_UART_RxCpltCallback+0x40>)
 80001e0:	f001 fd28 	bl	8001c34 <HAL_UART_Receive_IT>
	}
	if(huart -> Instance == USART2){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <HAL_UART_RxCpltCallback+0x44>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d104      	bne.n	80001f8 <HAL_UART_RxCpltCallback+0x30>
		//ring_buffer_write(data);
		HAL_UART_Receive_IT(&huart2, &data,1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	4904      	ldr	r1, [pc, #16]	@ (8000204 <HAL_UART_RxCpltCallback+0x3c>)
 80001f2:	4807      	ldr	r0, [pc, #28]	@ (8000210 <HAL_UART_RxCpltCallback+0x48>)
 80001f4:	f001 fd1e 	bl	8001c34 <HAL_UART_Receive_IT>
	}

}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40013800 	.word	0x40013800
 8000204:	2000018c 	.word	0x2000018c
 8000208:	2000007c 	.word	0x2000007c
 800020c:	40004400 	.word	0x40004400
 8000210:	20000104 	.word	0x20000104

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 f935 	bl	8000488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f829 	bl	8000274 <SystemClock_Config>
 // MX_GPIO_Init();
 // MX_USART2_UART_Init();
 // MX_USART1_UART_Init();
 // MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000222:	f002 fbe3 	bl	80029ec <ssd1306_Init>
  ssd1306_Fill(Black);
 8000226:	2000      	movs	r0, #0
 8000228:	f002 fc4a 	bl	8002ac0 <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 800022c:	2114      	movs	r1, #20
 800022e:	200a      	movs	r0, #10
 8000230:	f002 fd90 	bl	8002d54 <ssd1306_SetCursor>
  ssd1306_WriteString("Hi!", Font_6x8, White);
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <main+0x4c>)
 8000236:	2201      	movs	r2, #1
 8000238:	9200      	str	r2, [sp, #0]
 800023a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800023c:	4809      	ldr	r0, [pc, #36]	@ (8000264 <main+0x50>)
 800023e:	f002 fd63 	bl	8002d08 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000242:	f002 fc55 	bl	8002af0 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1,&data,1);
 8000246:	2201      	movs	r2, #1
 8000248:	4907      	ldr	r1, [pc, #28]	@ (8000268 <main+0x54>)
 800024a:	4808      	ldr	r0, [pc, #32]	@ (800026c <main+0x58>)
 800024c:	f001 fcf2 	bl	8001c34 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&data,1);
 8000250:	2201      	movs	r2, #1
 8000252:	4905      	ldr	r1, [pc, #20]	@ (8000268 <main+0x54>)
 8000254:	4806      	ldr	r0, [pc, #24]	@ (8000270 <main+0x5c>)
 8000256:	f001 fced 	bl	8001c34 <HAL_UART_Receive_IT>
  while (1)
 800025a:	bf00      	nop
 800025c:	e7fd      	b.n	800025a <main+0x46>
 800025e:	bf00      	nop
 8000260:	0800348c 	.word	0x0800348c
 8000264:	08002e58 	.word	0x08002e58
 8000268:	2000018c 	.word	0x2000018c
 800026c:	2000007c 	.word	0x2000007c
 8000270:	20000104 	.word	0x20000104

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b096      	sub	sp, #88	@ 0x58
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2244      	movs	r2, #68	@ 0x44
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fdb0 	bl	8002de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000296:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800029a:	f000 fead 	bl	8000ff8 <HAL_PWREx_ControlVoltageScaling>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a4:	f000 f837 	bl	8000316 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	2310      	movs	r3, #16
 80002b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	2302      	movs	r3, #2
 80002bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002be:	2301      	movs	r3, #1
 80002c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002c2:	230a      	movs	r3, #10
 80002c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002c6:	2307      	movs	r3, #7
 80002c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fee4 	bl	80010a4 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002e2:	f000 f818 	bl	8000316 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2303      	movs	r3, #3
 80002ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002fa:	463b      	mov	r3, r7
 80002fc:	2104      	movs	r1, #4
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 faac 	bl	800185c <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030a:	f000 f804 	bl	8000316 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3758      	adds	r7, #88	@ 0x58
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031a:	b672      	cpsid	i
}
 800031c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800031e:	bf00      	nop
 8000320:	e7fd      	b.n	800031e <Error_Handler+0x8>
	...

08000324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800032a:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <HAL_MspInit+0x44>)
 800032c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800032e:	4a0e      	ldr	r2, [pc, #56]	@ (8000368 <HAL_MspInit+0x44>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6613      	str	r3, [r2, #96]	@ 0x60
 8000336:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <HAL_MspInit+0x44>)
 8000338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <HAL_MspInit+0x44>)
 8000344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000346:	4a08      	ldr	r2, [pc, #32]	@ (8000368 <HAL_MspInit+0x44>)
 8000348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800034c:	6593      	str	r3, [r2, #88]	@ 0x58
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <HAL_MspInit+0x44>)
 8000350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <NMI_Handler+0x4>

08000374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <MemManage_Handler+0x4>

08000384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <BusFault_Handler+0x4>

0800038c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <UsageFault_Handler+0x4>

08000394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c2:	f000 f8bd 	bl	8000540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}

080003ca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 fa5e 	bl	8000890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 fa57 	bl	8000890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003ec:	4802      	ldr	r0, [pc, #8]	@ (80003f8 <USART1_IRQHandler+0x10>)
 80003ee:	f001 fc6d 	bl	8001ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000007c 	.word	0x2000007c

080003fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000400:	4802      	ldr	r0, [pc, #8]	@ (800040c <USART2_IRQHandler+0x10>)
 8000402:	f001 fc63 	bl	8001ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000104 	.word	0x20000104

08000410 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <SystemInit+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <SystemInit+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800046c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000438:	f7ff ffea 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000462:	f002 fcc9 	bl	8002df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000466:	f7ff fed5 	bl	8000214 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800046c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000478:	080034a0 	.word	0x080034a0
  ldr r2, =_sbss
 800047c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000480:	2000059c 	.word	0x2000059c

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>
	...

08000488 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800048e:	2300      	movs	r3, #0
 8000490:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <HAL_Init+0x3c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0b      	ldr	r2, [pc, #44]	@ (80004c4 <HAL_Init+0x3c>)
 8000498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800049c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800049e:	2003      	movs	r0, #3
 80004a0:	f000 f944 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004a4:	2000      	movs	r0, #0
 80004a6:	f000 f80f 	bl	80004c8 <HAL_InitTick>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d002      	beq.n	80004b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004b0:	2301      	movs	r3, #1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	e001      	b.n	80004ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004b6:	f7ff ff35 	bl	8000324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004d4:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <HAL_InitTick+0x6c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d023      	beq.n	8000524 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004dc:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <HAL_InitTick+0x70>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <HAL_InitTick+0x6c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f941 	bl	800077a <HAL_SYSTICK_Config>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10f      	bne.n	800051e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d809      	bhi.n	8000518 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	2200      	movs	r2, #0
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f919 	bl	8000742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_InitTick+0x74>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6013      	str	r3, [r2, #0]
 8000516:	e007      	b.n	8000528 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e004      	b.n	8000528 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800051e:	2301      	movs	r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
 8000522:	e001      	b.n	8000528 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008
 8000538:	20000000 	.word	0x20000000
 800053c:	20000004 	.word	0x20000004

08000540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_IncTick+0x20>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <HAL_IncTick+0x24>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4413      	add	r3, r2
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <HAL_IncTick+0x24>)
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000008 	.word	0x20000008
 8000564:	20000190 	.word	0x20000190

08000568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return uwTick;
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <HAL_GetTick+0x14>)
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000190 	.word	0x20000190

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff ffee 	bl	8000568 <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000598:	d005      	beq.n	80005a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HAL_Delay+0x44>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a6:	bf00      	nop
 80005a8:	f7ff ffde 	bl	8000568 <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f7      	bhi.n	80005a8 <HAL_Delay+0x28>
  {
  }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000008 	.word	0x20000008

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	@ (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	@ (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	@ (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	@ 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	@ 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f7ff ff8e 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff47 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000754:	f7ff ff5c 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff8e 	bl	8000680 <NVIC_EncodePriority>
 8000764:	4602      	mov	r2, r0
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff5d 	bl	800062c <__NVIC_SetPriority>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffb0 	bl	80006e8 <SysTick_Config>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000792:	b480      	push	{r7}
 8000794:	b085      	sub	sp, #20
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d008      	beq.n	80007bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2204      	movs	r2, #4
 80007ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e022      	b.n	8000802 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 020e 	bic.w	r2, r2, #14
 80007ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f022 0201 	bic.w	r2, r2, #1
 80007da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e0:	f003 021c 	and.w	r2, r3, #28
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e8:	2101      	movs	r1, #1
 80007ea:	fa01 f202 	lsl.w	r2, r1, r2
 80007ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2201      	movs	r2, #1
 80007f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000802:	4618      	mov	r0, r3
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b02      	cmp	r3, #2
 8000824:	d005      	beq.n	8000832 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2204      	movs	r2, #4
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e029      	b.n	8000886 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f022 020e 	bic.w	r2, r2, #14
 8000840:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 0201 	bic.w	r2, r2, #1
 8000850:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f003 021c 	and.w	r2, r3, #28
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	4798      	blx	r3
    }
  }
  return status;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4013      	ands	r3, r2
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40010400 	.word	0x40010400

080008c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af02      	add	r7, sp, #8
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	4608      	mov	r0, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	817b      	strh	r3, [r7, #10]
 80008ea:	460b      	mov	r3, r1
 80008ec:	813b      	strh	r3, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b20      	cmp	r3, #32
 80008fc:	f040 80f9 	bne.w	8000af2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d002      	beq.n	800090c <HAL_I2C_Mem_Write+0x34>
 8000906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000908:	2b00      	cmp	r3, #0
 800090a:	d105      	bne.n	8000918 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000912:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e0ed      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800091e:	2b01      	cmp	r3, #1
 8000920:	d101      	bne.n	8000926 <HAL_I2C_Mem_Write+0x4e>
 8000922:	2302      	movs	r3, #2
 8000924:	e0e6      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800092e:	f7ff fe1b 	bl	8000568 <HAL_GetTick>
 8000932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2319      	movs	r3, #25
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f000 f955 	bl	8000bf0 <I2C_WaitOnFlagUntilTimeout>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e0d1      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2221      	movs	r2, #33	@ 0x21
 8000954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2240      	movs	r2, #64	@ 0x40
 800095c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2200      	movs	r2, #0
 8000964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6a3a      	ldr	r2, [r7, #32]
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2200      	movs	r2, #0
 8000976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000978:	88f8      	ldrh	r0, [r7, #6]
 800097a:	893a      	ldrh	r2, [r7, #8]
 800097c:	8979      	ldrh	r1, [r7, #10]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4603      	mov	r3, r0
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f000 f8b9 	bl	8000b00 <I2C_RequestMemoryWrite>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d005      	beq.n	80009a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e0a9      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	2bff      	cmp	r3, #255	@ 0xff
 80009a8:	d90e      	bls.n	80009c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	22ff      	movs	r2, #255	@ 0xff
 80009ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	8979      	ldrh	r1, [r7, #10]
 80009b8:	2300      	movs	r3, #0
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 fad9 	bl	8000f78 <I2C_TransferConfig>
 80009c6:	e00f      	b.n	80009e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	8979      	ldrh	r1, [r7, #10]
 80009da:	2300      	movs	r3, #0
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 fac8 	bl	8000f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 f958 	bl	8000ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e07b      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d034      	beq.n	8000aa0 <HAL_I2C_Mem_Write+0x1c8>
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d130      	bne.n	8000aa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a44:	2200      	movs	r2, #0
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f8d1 	bl	8000bf0 <I2C_WaitOnFlagUntilTimeout>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e04d      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2bff      	cmp	r3, #255	@ 0xff
 8000a60:	d90e      	bls.n	8000a80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	22ff      	movs	r2, #255	@ 0xff
 8000a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	8979      	ldrh	r1, [r7, #10]
 8000a70:	2300      	movs	r3, #0
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 fa7d 	bl	8000f78 <I2C_TransferConfig>
 8000a7e:	e00f      	b.n	8000aa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	8979      	ldrh	r1, [r7, #10]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 fa6c 	bl	8000f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d19e      	bne.n	80009e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f93e 	bl	8000d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e01a      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6859      	ldr	r1, [r3, #4]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_I2C_Mem_Write+0x224>)
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2220      	movs	r2, #32
 8000ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000af2:	2302      	movs	r3, #2
  }
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	fe00e800 	.word	0xfe00e800

08000b00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	4608      	mov	r0, r1
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4603      	mov	r3, r0
 8000b10:	817b      	strh	r3, [r7, #10]
 8000b12:	460b      	mov	r3, r1
 8000b14:	813b      	strh	r3, [r7, #8]
 8000b16:	4613      	mov	r3, r2
 8000b18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	8979      	ldrh	r1, [r7, #10]
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <I2C_RequestMemoryWrite+0xa4>)
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f000 fa25 	bl	8000f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	69b9      	ldr	r1, [r7, #24]
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f8b5 	bl	8000ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e02c      	b.n	8000b9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d105      	bne.n	8000b54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b48:	893b      	ldrh	r3, [r7, #8]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b52:	e015      	b.n	8000b80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000b54:	893b      	ldrh	r3, [r7, #8]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	69b9      	ldr	r1, [r7, #24]
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f000 f89b 	bl	8000ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e012      	b.n	8000b9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b76:	893b      	ldrh	r3, [r7, #8]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2200      	movs	r2, #0
 8000b88:	2180      	movs	r1, #128	@ 0x80
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f830 	bl	8000bf0 <I2C_WaitOnFlagUntilTimeout>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	80002000 	.word	0x80002000

08000ba8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d103      	bne.n	8000bc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d007      	beq.n	8000be4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	699a      	ldr	r2, [r3, #24]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f042 0201 	orr.w	r2, r2, #1
 8000be2:	619a      	str	r2, [r3, #24]
  }
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c00:	e03b      	b.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f000 f8d6 	bl	8000db8 <I2C_IsErrorOccurred>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e041      	b.n	8000c9a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1c:	d02d      	beq.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c1e:	f7ff fca3 	bl	8000568 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d302      	bcc.n	8000c34 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d122      	bne.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	699a      	ldr	r2, [r3, #24]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	bf0c      	ite	eq
 8000c44:	2301      	moveq	r3, #1
 8000c46:	2300      	movne	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d113      	bne.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f043 0220 	orr.w	r2, r3, #32
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2220      	movs	r2, #32
 8000c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	699a      	ldr	r2, [r3, #24]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4013      	ands	r3, r2
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d0b4      	beq.n	8000c02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000cae:	e033      	b.n	8000d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f87f 	bl	8000db8 <I2C_IsErrorOccurred>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e031      	b.n	8000d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cca:	d025      	beq.n	8000d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ccc:	f7ff fc4c 	bl	8000568 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d302      	bcc.n	8000ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d11a      	bne.n	8000d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d013      	beq.n	8000d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf4:	f043 0220 	orr.w	r2, r3, #32
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2220      	movs	r2, #32
 8000d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e007      	b.n	8000d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d1c4      	bne.n	8000cb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d3c:	e02f      	b.n	8000d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 f838 	bl	8000db8 <I2C_IsErrorOccurred>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e02d      	b.n	8000dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d52:	f7ff fc09 	bl	8000568 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d302      	bcc.n	8000d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d11a      	bne.n	8000d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	d013      	beq.n	8000d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f043 0220 	orr.w	r2, r3, #32
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2220      	movs	r2, #32
 8000d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e007      	b.n	8000dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	2b20      	cmp	r3, #32
 8000daa:	d1c8      	bne.n	8000d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d068      	beq.n	8000eb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2210      	movs	r2, #16
 8000dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000dec:	e049      	b.n	8000e82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d045      	beq.n	8000e82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000df6:	f7ff fbb7 	bl	8000568 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d302      	bcc.n	8000e0c <I2C_IsErrorOccurred+0x54>
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d13a      	bne.n	8000e82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e2e:	d121      	bne.n	8000e74 <I2C_IsErrorOccurred+0xbc>
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e36:	d01d      	beq.n	8000e74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8000e38:	7cfb      	ldrb	r3, [r7, #19]
 8000e3a:	2b20      	cmp	r3, #32
 8000e3c:	d01a      	beq.n	8000e74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8000e4e:	f7ff fb8b 	bl	8000568 <HAL_GetTick>
 8000e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e54:	e00e      	b.n	8000e74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000e56:	f7ff fb87 	bl	8000568 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b19      	cmp	r3, #25
 8000e62:	d907      	bls.n	8000e74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8000e72:	e006      	b.n	8000e82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	2b20      	cmp	r3, #32
 8000e80:	d1e9      	bne.n	8000e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	d003      	beq.n	8000e98 <I2C_IsErrorOccurred+0xe0>
 8000e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0aa      	beq.n	8000dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8000e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d103      	bne.n	8000ea8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00b      	beq.n	8000f02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8000f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01c      	beq.n	8000f66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff fe3b 	bl	8000ba8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <I2C_IsErrorOccurred+0x1bc>)
 8000f3e:	400b      	ands	r3, r1
 8000f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8000f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3728      	adds	r7, #40	@ 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	fe00e800 	.word	0xfe00e800

08000f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	817b      	strh	r3, [r7, #10]
 8000f86:	4613      	mov	r3, r2
 8000f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f8a:	897b      	ldrh	r3, [r7, #10]
 8000f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	0d5b      	lsrs	r3, r3, #21
 8000fb2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <I2C_TransferConfig+0x60>)
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	ea02 0103 	and.w	r1, r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	03ff63ff 	.word	0x03ff63ff

08000fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001006:	d130      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001014:	d038      	beq.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001016:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2232      	movs	r2, #50	@ 0x32
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0c9b      	lsrs	r3, r3, #18
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800103c:	e002      	b.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3b01      	subs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001050:	d102      	bne.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f2      	bne.n	800103e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001064:	d110      	bne.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e00f      	b.n	800108a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001076:	d007      	beq.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001080:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001086:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40007000 	.word	0x40007000
 800109c:	20000000 	.word	0x20000000
 80010a0:	431bde83 	.word	0x431bde83

080010a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e3ca      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b6:	4b97      	ldr	r3, [pc, #604]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c0:	4b94      	ldr	r3, [pc, #592]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80e4 	beq.w	80012a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_RCC_OscConfig+0x4a>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	f040 808b 	bne.w	80011fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	f040 8087 	bne.w	80011fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010ee:	4b89      	ldr	r3, [pc, #548]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x62>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e3a2      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1a      	ldr	r2, [r3, #32]
 800110a:	4b82      	ldr	r3, [pc, #520]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <HAL_RCC_OscConfig+0x7c>
 8001116:	4b7f      	ldr	r3, [pc, #508]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800111e:	e005      	b.n	800112c <HAL_RCC_OscConfig+0x88>
 8001120:	4b7c      	ldr	r3, [pc, #496]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800112c:	4293      	cmp	r3, r2
 800112e:	d223      	bcs.n	8001178 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fd1d 	bl	8001b74 <RCC_SetFlashLatencyFromMSIRange>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e383      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001144:	4b73      	ldr	r3, [pc, #460]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a72      	ldr	r2, [pc, #456]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800114a:	f043 0308 	orr.w	r3, r3, #8
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b70      	ldr	r3, [pc, #448]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	496d      	ldr	r1, [pc, #436]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001162:	4b6c      	ldr	r3, [pc, #432]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	4968      	ldr	r1, [pc, #416]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
 8001176:	e025      	b.n	80011c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4b66      	ldr	r3, [pc, #408]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a65      	ldr	r2, [pc, #404]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b63      	ldr	r3, [pc, #396]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4960      	ldr	r1, [pc, #384]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001196:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	495b      	ldr	r1, [pc, #364]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d109      	bne.n	80011c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fcdd 	bl	8001b74 <RCC_SetFlashLatencyFromMSIRange>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e343      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011c4:	f000 fc4a 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b52      	ldr	r3, [pc, #328]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	4950      	ldr	r1, [pc, #320]	@ (8001318 <HAL_RCC_OscConfig+0x274>)
 80011d6:	5ccb      	ldrb	r3, [r1, r3]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	4a4e      	ldr	r2, [pc, #312]	@ (800131c <HAL_RCC_OscConfig+0x278>)
 80011e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001320 <HAL_RCC_OscConfig+0x27c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f96d 	bl	80004c8 <HAL_InitTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d052      	beq.n	800129e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	e327      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d032      	beq.n	800126a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001204:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a42      	ldr	r2, [pc, #264]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001210:	f7ff f9aa 	bl	8000568 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001218:	f7ff f9a6 	bl	8000568 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e310      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800122a:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a36      	ldr	r2, [pc, #216]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b34      	ldr	r3, [pc, #208]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4931      	ldr	r1, [pc, #196]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001254:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	492c      	ldr	r1, [pc, #176]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	e01a      	b.n	80012a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a29      	ldr	r2, [pc, #164]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001276:	f7ff f977 	bl	8000568 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800127e:	f7ff f973 	bl	8000568 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e2dd      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001290:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x1da>
 800129c:	e000      	b.n	80012a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800129e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d074      	beq.n	8001396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x21a>
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d10e      	bne.n	80012d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d10b      	bne.n	80012d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d064      	beq.n	8001394 <HAL_RCC_OscConfig+0x2f0>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d160      	bne.n	8001394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e2ba      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x24a>
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e026      	b.n	800133c <HAL_RCC_OscConfig+0x298>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012f6:	d115      	bne.n	8001324 <HAL_RCC_OscConfig+0x280>
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 80012fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a02      	ldr	r2, [pc, #8]	@ (8001314 <HAL_RCC_OscConfig+0x270>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e014      	b.n	800133c <HAL_RCC_OscConfig+0x298>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	08002e5c 	.word	0x08002e5c
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004
 8001324:	4ba0      	ldr	r3, [pc, #640]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a9f      	ldr	r2, [pc, #636]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b9d      	ldr	r3, [pc, #628]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a9c      	ldr	r2, [pc, #624]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff f910 	bl	8000568 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff f90c 	bl	8000568 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	@ 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e276      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135e:	4b92      	ldr	r3, [pc, #584]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x2a8>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff f8fc 	bl	8000568 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff f8f8 	bl	8000568 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	@ 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e262      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001386:	4b88      	ldr	r3, [pc, #544]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x2d0>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d060      	beq.n	8001464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_OscConfig+0x310>
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d119      	bne.n	80013e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d116      	bne.n	80013e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b4:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_OscConfig+0x328>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e23f      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b76      	ldr	r3, [pc, #472]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	4973      	ldr	r1, [pc, #460]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e0:	e040      	b.n	8001464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d023      	beq.n	8001432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ea:	4b6f      	ldr	r3, [pc, #444]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6e      	ldr	r2, [pc, #440]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff f8b7 	bl	8000568 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff f8b3 	bl	8000568 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e21d      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001410:	4b65      	ldr	r3, [pc, #404]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b62      	ldr	r3, [pc, #392]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	495f      	ldr	r1, [pc, #380]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	e018      	b.n	8001464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b5d      	ldr	r3, [pc, #372]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a5c      	ldr	r2, [pc, #368]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800143c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff f893 	bl	8000568 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff f88f 	bl	8000568 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1f9      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001458:	4b53      	ldr	r3, [pc, #332]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d03c      	beq.n	80014ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001478:	4b4b      	ldr	r3, [pc, #300]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800147e:	4a4a      	ldr	r2, [pc, #296]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff f86e 	bl	8000568 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff f86a 	bl	8000568 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1d4      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a2:	4b41      	ldr	r3, [pc, #260]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ef      	beq.n	8001490 <HAL_RCC_OscConfig+0x3ec>
 80014b0:	e01b      	b.n	80014ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b2:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b8:	4a3b      	ldr	r2, [pc, #236]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff f851 	bl	8000568 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff f84d 	bl	8000568 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1b7      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014dc:	4b32      	ldr	r3, [pc, #200]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80014de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1ef      	bne.n	80014ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a6 	beq.w	8001644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10d      	bne.n	8001524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	4a26      	ldr	r2, [pc, #152]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800150e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001512:	6593      	str	r3, [r2, #88]	@ 0x58
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001520:	2301      	movs	r3, #1
 8001522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001524:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <HAL_RCC_OscConfig+0x508>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d118      	bne.n	8001562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001530:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <HAL_RCC_OscConfig+0x508>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1d      	ldr	r2, [pc, #116]	@ (80015ac <HAL_RCC_OscConfig+0x508>)
 8001536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153c:	f7ff f814 	bl	8000568 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001544:	f7ff f810 	bl	8000568 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e17a      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_RCC_OscConfig+0x508>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d108      	bne.n	800157c <HAL_RCC_OscConfig+0x4d8>
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800156c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800157a:	e029      	b.n	80015d0 <HAL_RCC_OscConfig+0x52c>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d115      	bne.n	80015b0 <HAL_RCC_OscConfig+0x50c>
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158a:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800159a:	4a03      	ldr	r2, [pc, #12]	@ (80015a8 <HAL_RCC_OscConfig+0x504>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015a4:	e014      	b.n	80015d0 <HAL_RCC_OscConfig+0x52c>
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40007000 	.word	0x40007000
 80015b0:	4b9c      	ldr	r3, [pc, #624]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a9b      	ldr	r2, [pc, #620]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c0:	4b98      	ldr	r3, [pc, #608]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a97      	ldr	r2, [pc, #604]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d016      	beq.n	8001606 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7fe ffc6 	bl	8000568 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7fe ffc2 	bl	8000568 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e12a      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ed      	beq.n	80015e0 <HAL_RCC_OscConfig+0x53c>
 8001604:	e015      	b.n	8001632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7fe ffaf 	bl	8000568 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7fe ffab 	bl	8000568 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e113      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001624:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ed      	bne.n	800160e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001638:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	4a79      	ldr	r2, [pc, #484]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800163e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80fe 	beq.w	800184a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001652:	2b02      	cmp	r3, #2
 8001654:	f040 80d0 	bne.w	80017f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001658:	4b72      	ldr	r3, [pc, #456]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001668:	429a      	cmp	r2, r3
 800166a:	d130      	bne.n	80016ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	3b01      	subs	r3, #1
 8001678:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d127      	bne.n	80016ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d11f      	bne.n	80016ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001698:	2a07      	cmp	r2, #7
 800169a:	bf14      	ite	ne
 800169c:	2201      	movne	r2, #1
 800169e:	2200      	moveq	r2, #0
 80016a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d113      	bne.n	80016ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d06e      	beq.n	80017ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d069      	beq.n	80017a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016e0:	4b50      	ldr	r3, [pc, #320]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0ad      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80016f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016fc:	f7fe ff34 	bl	8000568 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7fe ff30 	bl	8000568 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e09a      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001716:	4b43      	ldr	r3, [pc, #268]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001722:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <HAL_RCC_OscConfig+0x784>)
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001732:	3a01      	subs	r2, #1
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800173c:	0212      	lsls	r2, r2, #8
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001744:	0852      	lsrs	r2, r2, #1
 8001746:	3a01      	subs	r2, #1
 8001748:	0552      	lsls	r2, r2, #21
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001750:	0852      	lsrs	r2, r2, #1
 8001752:	3a01      	subs	r2, #1
 8001754:	0652      	lsls	r2, r2, #25
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800175c:	0912      	lsrs	r2, r2, #4
 800175e:	0452      	lsls	r2, r2, #17
 8001760:	430a      	orrs	r2, r1
 8001762:	4930      	ldr	r1, [pc, #192]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001768:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001774:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800177e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001780:	f7fe fef2 	bl	8000568 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001788:	f7fe feee 	bl	8000568 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e058      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a6:	e050      	b.n	800184a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e04f      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d148      	bne.n	800184a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017d0:	f7fe feca 	bl	8000568 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7fe fec6 	bl	8000568 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e030      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x734>
 80017f6:	e028      	b.n	800184a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d023      	beq.n	8001846 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_RCC_OscConfig+0x780>)
 8001804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7fe fead 	bl	8000568 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001810:	e00c      	b.n	800182c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7fe fea9 	bl	8000568 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d905      	bls.n	800182c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e013      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
 8001824:	40021000 	.word	0x40021000
 8001828:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_RCC_OscConfig+0x7b0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ec      	bne.n	8001812 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_RCC_OscConfig+0x7b0>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4905      	ldr	r1, [pc, #20]	@ (8001854 <HAL_RCC_OscConfig+0x7b0>)
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_RCC_OscConfig+0x7b4>)
 8001840:	4013      	ands	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
 8001844:	e001      	b.n	800184a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	feeefffc 	.word	0xfeeefffc

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0e7      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b75      	ldr	r3, [pc, #468]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d910      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b72      	ldr	r3, [pc, #456]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4970      	ldr	r1, [pc, #448]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cf      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d908      	bls.n	80018ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4960      	ldr	r1, [pc, #384]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d04c      	beq.n	8001974 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d121      	bne.n	8001932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0a6      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	4b54      	ldr	r3, [pc, #336]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e09a      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001912:	4b4e      	ldr	r3, [pc, #312]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e08e      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001922:	4b4a      	ldr	r3, [pc, #296]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e086      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b46      	ldr	r3, [pc, #280]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4943      	ldr	r1, [pc, #268]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001944:	f7fe fe10 	bl	8000568 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7fe fe0c 	bl	8000568 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e06e      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b3a      	ldr	r3, [pc, #232]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d010      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	4b31      	ldr	r3, [pc, #196]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800198c:	429a      	cmp	r2, r3
 800198e:	d208      	bcs.n	80019a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	492b      	ldr	r1, [pc, #172]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a2:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d210      	bcs.n	80019d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 0207 	bic.w	r2, r3, #7
 80019b8:	4923      	ldr	r1, [pc, #140]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c0:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <HAL_RCC_ClockConfig+0x1ec>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e036      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019de:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4918      	ldr	r1, [pc, #96]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4910      	ldr	r1, [pc, #64]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a10:	f000 f824 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	490b      	ldr	r1, [pc, #44]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f4>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1fc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd47 	bl	80004c8 <HAL_InitTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08002e5c 	.word	0x08002e5c
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a74:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x34>
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d121      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d11e      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a90:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e004      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae0:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ae2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d134      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d003      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0xac>
 8001b00:	e005      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b04:	617b      	str	r3, [r7, #20]
      break;
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b0a:	617b      	str	r3, [r7, #20]
      break;
 8001b0c:	e002      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	3301      	adds	r3, #1
 8001b20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	0e5b      	lsrs	r3, r3, #25
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	3301      	adds	r3, #1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b54:	69bb      	ldr	r3, [r7, #24]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08002e6c 	.word	0x08002e6c
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b80:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff fa26 	bl	8000fdc <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
 8001b92:	e014      	b.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bac:	f7ff fa16 	bl	8000fdc <HAL_PWREx_GetVoltageRange>
 8001bb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc4:	d10b      	bne.n	8001bde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b80      	cmp	r3, #128	@ 0x80
 8001bca:	d919      	bls.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bd0:	d902      	bls.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e013      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	e010      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b80      	cmp	r3, #128	@ 0x80
 8001be2:	d902      	bls.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001be4:	2303      	movs	r3, #3
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	e00a      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b80      	cmp	r3, #128	@ 0x80
 8001bee:	d102      	bne.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e004      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b70      	cmp	r3, #112	@ 0x70
 8001bfa:	d101      	bne.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 0207 	bic.w	r2, r3, #7
 8001c08:	4909      	ldr	r1, [pc, #36]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c10:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d137      	bne.n	8001cbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_UART_Receive_IT+0x24>
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e030      	b.n	8001cbe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_UART_Receive_IT+0x94>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d01f      	beq.n	8001cac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d018      	beq.n	8001cac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	e853 3f00 	ldrex	r3, [r3]
 8001c86:	613b      	str	r3, [r7, #16]
   return(result);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c9c:	69f9      	ldr	r1, [r7, #28]
 8001c9e:	6a3a      	ldr	r2, [r7, #32]
 8001ca0:	e841 2300 	strex	r3, r2, [r1]
 8001ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e6      	bne.n	8001c7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fb30 	bl	8002318 <UART_Start_Receive_IT>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40008000 	.word	0x40008000

08001ccc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0ba      	sub	sp, #232	@ 0xe8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001cf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001cf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8001d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d115      	bne.n	8001d34 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00f      	beq.n	8001d34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 82ca 	beq.w	80022be <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
      }
      return;
 8001d32:	e2c4      	b.n	80022be <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8001d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8117 	beq.w	8001f6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001d4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001d4e:	4b85      	ldr	r3, [pc, #532]	@ (8001f64 <HAL_UART_IRQHandler+0x298>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 810a 	beq.w	8001f6c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d011      	beq.n	8001d88 <HAL_UART_IRQHandler+0xbc>
 8001d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d011      	beq.n	8001db8 <HAL_UART_IRQHandler+0xec>
 8001d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2202      	movs	r2, #2
 8001da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dae:	f043 0204 	orr.w	r2, r3, #4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d011      	beq.n	8001de8 <HAL_UART_IRQHandler+0x11c>
 8001dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00b      	beq.n	8001de8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dde:	f043 0202 	orr.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2208      	movs	r2, #8
 8001e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e1a:	f043 0208 	orr.w	r2, r3, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <HAL_UART_IRQHandler+0x18a>
 8001e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00c      	beq.n	8001e56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8230 	beq.w	80022c2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ea6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04f      	beq.n	8001f4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 faf8 	bl	80024a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebe:	2b40      	cmp	r3, #64	@ 0x40
 8001ec0:	d141      	bne.n	8001f46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001eee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001efa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001efe:	e841 2300 	strex	r3, r2, [r1]
 8001f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1d9      	bne.n	8001ec2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d013      	beq.n	8001f3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1a:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <HAL_UART_IRQHandler+0x29c>)
 8001f1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fc73 	bl	800080e <HAL_DMA_Abort_IT>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d017      	beq.n	8001f5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f3c:	e00f      	b.n	8001f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f9d4 	bl	80022ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f44:	e00b      	b.n	8001f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9d0 	bl	80022ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4c:	e007      	b.n	8001f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f9cc 	bl	80022ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8001f5c:	e1b1      	b.n	80022c2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5e:	bf00      	nop
    return;
 8001f60:	e1af      	b.n	80022c2 <HAL_UART_IRQHandler+0x5f6>
 8001f62:	bf00      	nop
 8001f64:	04000120 	.word	0x04000120
 8001f68:	0800256d 	.word	0x0800256d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	f040 816a 	bne.w	800224a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8163 	beq.w	800224a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 815c 	beq.w	800224a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2210      	movs	r2, #16
 8001f98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa4:	2b40      	cmp	r3, #64	@ 0x40
 8001fa6:	f040 80d4 	bne.w	8002152 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80ad 	beq.w	800211a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	f080 80a5 	bcs.w	800211a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fd6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 8086 	bne.w	80020f8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ff8:	e853 3f00 	ldrex	r3, [r3]
 8001ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002000:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002016:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800201a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002022:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002026:	e841 2300 	strex	r3, r2, [r1]
 800202a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800202e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1da      	bne.n	8001fec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3308      	adds	r3, #8
 800203c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002040:	e853 3f00 	ldrex	r3, [r3]
 8002044:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3308      	adds	r3, #8
 8002056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800205a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800205e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002060:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800206c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e1      	bne.n	8002036 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3308      	adds	r3, #8
 8002078:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3308      	adds	r3, #8
 8002092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002096:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002098:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800209c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800209e:	e841 2300 	strex	r3, r2, [r1]
 80020a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80020a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1e3      	bne.n	8002072 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020c0:	e853 3f00 	ldrex	r3, [r3]
 80020c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80020c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020c8:	f023 0310 	bic.w	r3, r3, #16
 80020cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020e2:	e841 2300 	strex	r3, r2, [r1]
 80020e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80020e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1e4      	bne.n	80020b8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fb4d 	bl	8000792 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800210a:	b29b      	uxth	r3, r3
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	b29b      	uxth	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8f4 	bl	8002300 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002118:	e0d5      	b.n	80022c6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002120:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 80ce 	bne.w	80022c6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	f040 80c5 	bne.w	80022c6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8d8 	bl	8002300 <HAL_UARTEx_RxEventCallback>
      return;
 8002150:	e0b9      	b.n	80022c6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800215e:	b29b      	uxth	r3, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80ab 	beq.w	80022ca <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a6 	beq.w	80022ca <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002186:	e853 3f00 	ldrex	r3, [r3]
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800218c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80021a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021a8:	e841 2300 	strex	r3, r2, [r1]
 80021ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80021ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e4      	bne.n	800217e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3308      	adds	r3, #8
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	e853 3f00 	ldrex	r3, [r3]
 80021c2:	623b      	str	r3, [r7, #32]
   return(result);
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3308      	adds	r3, #8
 80021d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021e0:	e841 2300 	strex	r3, r2, [r1]
 80021e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e3      	bne.n	80021b4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	e853 3f00 	ldrex	r3, [r3]
 800220c:	60fb      	str	r3, [r7, #12]
   return(result);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f023 0310 	bic.w	r3, r3, #16
 8002214:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	e841 2300 	strex	r3, r2, [r1]
 800222e:	617b      	str	r3, [r7, #20]
   return(result);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1e4      	bne.n	8002200 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800223c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f85c 	bl	8002300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002248:	e03f      	b.n	80022ca <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <HAL_UART_IRQHandler+0x5a8>
 8002256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800225a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800226a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb79 	bl	8002964 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002272:	e02d      	b.n	80022d0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
    }
    return;
 800229c:	e017      	b.n	80022ce <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800229e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <HAL_UART_IRQHandler+0x604>
 80022aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f96e 	bl	8002598 <UART_EndTransmit_IT>
    return;
 80022bc:	e008      	b.n	80022d0 <HAL_UART_IRQHandler+0x604>
      return;
 80022be:	bf00      	nop
 80022c0:	e006      	b.n	80022d0 <HAL_UART_IRQHandler+0x604>
    return;
 80022c2:	bf00      	nop
 80022c4:	e004      	b.n	80022d0 <HAL_UART_IRQHandler+0x604>
      return;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <HAL_UART_IRQHandler+0x604>
      return;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <HAL_UART_IRQHandler+0x604>
    return;
 80022ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80022d0:	37e8      	adds	r7, #232	@ 0xe8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop

080022d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002318:	b480      	push	{r7}
 800231a:	b097      	sub	sp, #92	@ 0x5c
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800234a:	d10e      	bne.n	800236a <UART_Start_Receive_IT+0x52>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <UART_Start_Receive_IT+0x48>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800235a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800235e:	e02d      	b.n	80023bc <UART_Start_Receive_IT+0xa4>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	22ff      	movs	r2, #255	@ 0xff
 8002364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002368:	e028      	b.n	80023bc <UART_Start_Receive_IT+0xa4>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <UART_Start_Receive_IT+0x76>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <UART_Start_Receive_IT+0x6c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	22ff      	movs	r2, #255	@ 0xff
 800237e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002382:	e01b      	b.n	80023bc <UART_Start_Receive_IT+0xa4>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	227f      	movs	r2, #127	@ 0x7f
 8002388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800238c:	e016      	b.n	80023bc <UART_Start_Receive_IT+0xa4>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002396:	d10d      	bne.n	80023b4 <UART_Start_Receive_IT+0x9c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <UART_Start_Receive_IT+0x92>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	227f      	movs	r2, #127	@ 0x7f
 80023a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80023a8:	e008      	b.n	80023bc <UART_Start_Receive_IT+0xa4>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	223f      	movs	r2, #63	@ 0x3f
 80023ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80023b2:	e003      	b.n	80023bc <UART_Start_Receive_IT+0xa4>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2222      	movs	r2, #34	@ 0x22
 80023c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3308      	adds	r3, #8
 80023d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023d6:	e853 3f00 	ldrex	r3, [r3]
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3308      	adds	r3, #8
 80023ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80023ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80023ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80023f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f4:	e841 2300 	strex	r3, r2, [r1]
 80023f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80023fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e5      	bne.n	80023cc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002408:	d107      	bne.n	800241a <UART_Start_Receive_IT+0x102>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a21      	ldr	r2, [pc, #132]	@ (800249c <UART_Start_Receive_IT+0x184>)
 8002416:	669a      	str	r2, [r3, #104]	@ 0x68
 8002418:	e002      	b.n	8002420 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a20      	ldr	r2, [pc, #128]	@ (80024a0 <UART_Start_Receive_IT+0x188>)
 800241e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d019      	beq.n	800245c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800243c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
 8002448:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800244c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800244e:	e841 2300 	strex	r3, r2, [r1]
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e6      	bne.n	8002428 <UART_Start_Receive_IT+0x110>
 800245a:	e018      	b.n	800248e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	613b      	str	r3, [r7, #16]
   return(result);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f043 0320 	orr.w	r3, r3, #32
 8002470:	653b      	str	r3, [r7, #80]	@ 0x50
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	69f9      	ldr	r1, [r7, #28]
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	61bb      	str	r3, [r7, #24]
   return(result);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e6      	bne.n	800245c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	375c      	adds	r7, #92	@ 0x5c
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	080027a9 	.word	0x080027a9
 80024a0:	080025ed 	.word	0x080025ed

080024a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b095      	sub	sp, #84	@ 0x54
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80024cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024d2:	e841 2300 	strex	r3, r2, [r1]
 80024d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e6      	bne.n	80024ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3308      	adds	r3, #8
 80024e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3308      	adds	r3, #8
 80024fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e5      	bne.n	80024de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002516:	2b01      	cmp	r3, #1
 8002518:	d118      	bne.n	800254c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	60bb      	str	r3, [r7, #8]
   return(result);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253c:	6979      	ldr	r1, [r7, #20]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	613b      	str	r3, [r7, #16]
   return(result);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e6      	bne.n	800251a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002560:	bf00      	nop
 8002562:	3754      	adds	r7, #84	@ 0x54
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff feae 	bl	80022ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6979      	ldr	r1, [r7, #20]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	613b      	str	r3, [r7, #16]
   return(result);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e6      	bne.n	80025a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fe7a 	bl	80022d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e4:	bf00      	nop
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b09c      	sub	sp, #112	@ 0x70
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80025fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002604:	2b22      	cmp	r3, #34	@ 0x22
 8002606:	f040 80be 	bne.w	8002786 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002610:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002614:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002618:	b2d9      	uxtb	r1, r3
 800261a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	400a      	ands	r2, r1
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 80a3 	bne.w	800279a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002672:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002674:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e6      	bne.n	8002654 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3308      	adds	r3, #8
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	667b      	str	r3, [r7, #100]	@ 0x64
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3308      	adds	r3, #8
 80026a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80026a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80026a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80026b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e5      	bne.n	8002686 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <UART_RxISR_8BIT+0x1b8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d01f      	beq.n	8002718 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d018      	beq.n	8002718 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	623b      	str	r3, [r7, #32]
   return(result);
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002704:	633b      	str	r3, [r7, #48]	@ 0x30
 8002706:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800270a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800270c:	e841 2300 	strex	r3, r2, [r1]
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e6      	bne.n	80026e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271c:	2b01      	cmp	r3, #1
 800271e:	d12e      	bne.n	800277e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	e853 3f00 	ldrex	r3, [r3]
 8002732:	60fb      	str	r3, [r7, #12]
   return(result);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0310 	bic.w	r3, r3, #16
 800273a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	617b      	str	r3, [r7, #20]
   return(result);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e6      	bne.n	8002726 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d103      	bne.n	800276e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2210      	movs	r2, #16
 800276c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fdc2 	bl	8002300 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800277c:	e00d      	b.n	800279a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fd fd22 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8002784:	e009      	b.n	800279a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	8b1b      	ldrh	r3, [r3, #24]
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0208 	orr.w	r2, r2, #8
 8002796:	b292      	uxth	r2, r2
 8002798:	831a      	strh	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	3770      	adds	r7, #112	@ 0x70
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40008000 	.word	0x40008000

080027a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b09c      	sub	sp, #112	@ 0x70
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80027b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027c0:	2b22      	cmp	r3, #34	@ 0x22
 80027c2:	f040 80be 	bne.w	8002942 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80027cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80027d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80027da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80027de:	4013      	ands	r3, r2
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	1c9a      	adds	r2, r3, #2
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 80a3 	bne.w	8002956 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800281e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002824:	667b      	str	r3, [r7, #100]	@ 0x64
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002830:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002834:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800283c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e6      	bne.n	8002810 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3308      	adds	r3, #8
 8002848:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	663b      	str	r3, [r7, #96]	@ 0x60
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3308      	adds	r3, #8
 8002860:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002862:	643a      	str	r2, [r7, #64]	@ 0x40
 8002864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002868:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e5      	bne.n	8002842 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a34      	ldr	r2, [pc, #208]	@ (8002960 <UART_RxISR_16BIT+0x1b8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01f      	beq.n	80028d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	e853 3f00 	ldrex	r3, [r3]
 80028ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e6      	bne.n	80028a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d12e      	bne.n	800293a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	e853 3f00 	ldrex	r3, [r3]
 80028ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f023 0310 	bic.w	r3, r3, #16
 80028f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	6979      	ldr	r1, [r7, #20]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	613b      	str	r3, [r7, #16]
   return(result);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e6      	bne.n	80028e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b10      	cmp	r3, #16
 8002920:	d103      	bne.n	800292a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fce4 	bl	8002300 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002938:	e00d      	b.n	8002956 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fc44 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8002940:	e009      	b.n	8002956 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	8b1b      	ldrh	r3, [r3, #24]
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	b292      	uxth	r2, r2
 8002954:	831a      	strh	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	3770      	adds	r7, #112	@ 0x70
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40008000 	.word	0x40008000

08002964 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af04      	add	r7, sp, #16
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	2301      	movs	r3, #1
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	2200      	movs	r2, #0
 80029a4:	2178      	movs	r1, #120	@ 0x78
 80029a6:	4803      	ldr	r0, [pc, #12]	@ (80029b4 <ssd1306_WriteCommand+0x2c>)
 80029a8:	f7fd ff96 	bl	80008d8 <HAL_I2C_Mem_Write>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000028 	.word	0x20000028

080029b8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af04      	add	r7, sp, #16
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f04f 32ff 	mov.w	r2, #4294967295
 80029ca:	9202      	str	r2, [sp, #8]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2301      	movs	r3, #1
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	2178      	movs	r1, #120	@ 0x78
 80029d8:	4803      	ldr	r0, [pc, #12]	@ (80029e8 <ssd1306_WriteData+0x30>)
 80029da:	f7fd ff7d 	bl	80008d8 <HAL_I2C_Mem_Write>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000028 	.word	0x20000028

080029ec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80029f0:	f7ff ffc2 	bl	8002978 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80029f4:	2064      	movs	r0, #100	@ 0x64
 80029f6:	f7fd fdc3 	bl	8000580 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 f9d6 	bl	8002dac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002a00:	2020      	movs	r0, #32
 8002a02:	f7ff ffc1 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff ffbe 	bl	8002988 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002a0c:	20b0      	movs	r0, #176	@ 0xb0
 8002a0e:	f7ff ffbb 	bl	8002988 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002a12:	20c8      	movs	r0, #200	@ 0xc8
 8002a14:	f7ff ffb8 	bl	8002988 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff ffb5 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002a1e:	2010      	movs	r0, #16
 8002a20:	f7ff ffb2 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002a24:	2040      	movs	r0, #64	@ 0x40
 8002a26:	f7ff ffaf 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002a2a:	20ff      	movs	r0, #255	@ 0xff
 8002a2c:	f000 f9aa 	bl	8002d84 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a30:	20a1      	movs	r0, #161	@ 0xa1
 8002a32:	f7ff ffa9 	bl	8002988 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a36:	20a6      	movs	r0, #166	@ 0xa6
 8002a38:	f7ff ffa6 	bl	8002988 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002a3c:	20a8      	movs	r0, #168	@ 0xa8
 8002a3e:	f7ff ffa3 	bl	8002988 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002a42:	203f      	movs	r0, #63	@ 0x3f
 8002a44:	f7ff ffa0 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a48:	20a4      	movs	r0, #164	@ 0xa4
 8002a4a:	f7ff ff9d 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002a4e:	20d3      	movs	r0, #211	@ 0xd3
 8002a50:	f7ff ff9a 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff ff97 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a5a:	20d5      	movs	r0, #213	@ 0xd5
 8002a5c:	f7ff ff94 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002a60:	20f0      	movs	r0, #240	@ 0xf0
 8002a62:	f7ff ff91 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002a66:	20d9      	movs	r0, #217	@ 0xd9
 8002a68:	f7ff ff8e 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a6c:	2022      	movs	r0, #34	@ 0x22
 8002a6e:	f7ff ff8b 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a72:	20da      	movs	r0, #218	@ 0xda
 8002a74:	f7ff ff88 	bl	8002988 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a78:	2012      	movs	r0, #18
 8002a7a:	f7ff ff85 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a7e:	20db      	movs	r0, #219	@ 0xdb
 8002a80:	f7ff ff82 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a84:	2020      	movs	r0, #32
 8002a86:	f7ff ff7f 	bl	8002988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a8a:	208d      	movs	r0, #141	@ 0x8d
 8002a8c:	f7ff ff7c 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a90:	2014      	movs	r0, #20
 8002a92:	f7ff ff79 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a96:	2001      	movs	r0, #1
 8002a98:	f000 f988 	bl	8002dac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 f80f 	bl	8002ac0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002aa2:	f000 f825 	bl	8002af0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <ssd1306_Init+0xd0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <ssd1306_Init+0xd0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ab2:	4b02      	ldr	r3, [pc, #8]	@ (8002abc <ssd1306_Init+0xd0>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	711a      	strb	r2, [r3, #4]
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000594 	.word	0x20000594

08002ac0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <ssd1306_Fill+0x14>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <ssd1306_Fill+0x16>
 8002ad4:	23ff      	movs	r3, #255	@ 0xff
 8002ad6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ada:	4619      	mov	r1, r3
 8002adc:	4803      	ldr	r0, [pc, #12]	@ (8002aec <ssd1306_Fill+0x2c>)
 8002ade:	f000 f983 	bl	8002de8 <memset>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000194 	.word	0x20000194

08002af0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]
 8002afa:	e016      	b.n	8002b2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	3b50      	subs	r3, #80	@ 0x50
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff40 	bl	8002988 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7ff ff3d 	bl	8002988 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002b0e:	2010      	movs	r0, #16
 8002b10:	f7ff ff3a 	bl	8002988 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	01db      	lsls	r3, r3, #7
 8002b18:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <ssd1306_UpdateScreen+0x4c>)
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2180      	movs	r1, #128	@ 0x80
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff4a 	bl	80029b8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	3301      	adds	r3, #1
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	d9e5      	bls.n	8002afc <ssd1306_UpdateScreen+0xc>
    }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000194 	.word	0x20000194

08002b40 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	71bb      	strb	r3, [r7, #6]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db3d      	blt.n	8002bd6 <ssd1306_DrawPixel+0x96>
 8002b5a:	79bb      	ldrb	r3, [r7, #6]
 8002b5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b5e:	d83a      	bhi.n	8002bd6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002b60:	797b      	ldrb	r3, [r7, #5]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d11a      	bne.n	8002b9c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b66:	79fa      	ldrb	r2, [r7, #7]
 8002b68:	79bb      	ldrb	r3, [r7, #6]
 8002b6a:	08db      	lsrs	r3, r3, #3
 8002b6c:	b2d8      	uxtb	r0, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	4413      	add	r3, r2
 8002b74:	4a1b      	ldr	r2, [pc, #108]	@ (8002be4 <ssd1306_DrawPixel+0xa4>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b259      	sxtb	r1, r3
 8002b8c:	79fa      	ldrb	r2, [r7, #7]
 8002b8e:	4603      	mov	r3, r0
 8002b90:	01db      	lsls	r3, r3, #7
 8002b92:	4413      	add	r3, r2
 8002b94:	b2c9      	uxtb	r1, r1
 8002b96:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <ssd1306_DrawPixel+0xa4>)
 8002b98:	54d1      	strb	r1, [r2, r3]
 8002b9a:	e01d      	b.n	8002bd8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b9c:	79fa      	ldrb	r2, [r7, #7]
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	08db      	lsrs	r3, r3, #3
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	01db      	lsls	r3, r3, #7
 8002ba8:	4413      	add	r3, r2
 8002baa:	4a0e      	ldr	r2, [pc, #56]	@ (8002be4 <ssd1306_DrawPixel+0xa4>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	b25a      	sxtb	r2, r3
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b259      	sxtb	r1, r3
 8002bc6:	79fa      	ldrb	r2, [r7, #7]
 8002bc8:	4603      	mov	r3, r0
 8002bca:	01db      	lsls	r3, r3, #7
 8002bcc:	4413      	add	r3, r2
 8002bce:	b2c9      	uxtb	r1, r1
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <ssd1306_DrawPixel+0xa4>)
 8002bd2:	54d1      	strb	r1, [r2, r3]
 8002bd4:	e000      	b.n	8002bd8 <ssd1306_DrawPixel+0x98>
        return;
 8002bd6:	bf00      	nop
    }
}
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000194 	.word	0x20000194

08002be8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4604      	mov	r4, r0
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	d902      	bls.n	8002c06 <ssd1306_WriteChar+0x1e>
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b7e      	cmp	r3, #126	@ 0x7e
 8002c04:	d901      	bls.n	8002c0a <ssd1306_WriteChar+0x22>
        return 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e077      	b.n	8002cfa <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	783b      	ldrb	r3, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	2b80      	cmp	r3, #128	@ 0x80
 8002c16:	dc06      	bgt.n	8002c26 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002c18:	4b3a      	ldr	r3, [pc, #232]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002c1a:	885b      	ldrh	r3, [r3, #2]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	787b      	ldrb	r3, [r7, #1]
 8002c20:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	dd01      	ble.n	8002c2a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e067      	b.n	8002cfa <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e04e      	b.n	8002cce <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	3b20      	subs	r3, #32
 8002c36:	7879      	ldrb	r1, [r7, #1]
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	440b      	add	r3, r1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	e036      	b.n	8002cbe <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c60:	4b28      	ldr	r3, [pc, #160]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b2d8      	uxtb	r0, r3
 8002c6e:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002c70:	885b      	ldrh	r3, [r3, #2]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <ssd1306_DrawPixel>
 8002c86:	e017      	b.n	8002cb8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	b2d8      	uxtb	r0, r3
 8002c96:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002c98:	885b      	ldrh	r3, [r3, #2]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	b2d9      	uxtb	r1, r3
 8002ca4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7ff ff44 	bl	8002b40 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	783b      	ldrb	r3, [r7, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d3c3      	bcc.n	8002c50 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	787b      	ldrb	r3, [r7, #1]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d3ab      	bcc.n	8002c30 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	2a00      	cmp	r2, #0
 8002ce0:	d005      	beq.n	8002cee <ssd1306_WriteChar+0x106>
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	3a20      	subs	r2, #32
 8002ce8:	440a      	add	r2, r1
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	e000      	b.n	8002cf0 <ssd1306_WriteChar+0x108>
 8002cee:	783a      	ldrb	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <ssd1306_WriteChar+0x11c>)
 8002cf6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000594 	.word	0x20000594

08002d08 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4638      	mov	r0, r7
 8002d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002d16:	e013      	b.n	8002d40 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	7818      	ldrb	r0, [r3, #0]
 8002d1c:	7e3b      	ldrb	r3, [r7, #24]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	463b      	mov	r3, r7
 8002d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d24:	f7ff ff60 	bl	8002be8 <ssd1306_WriteChar>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d002      	beq.n	8002d3a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	e008      	b.n	8002d4c <ssd1306_WriteString+0x44>
        }
        str++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e7      	bne.n	8002d18 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <ssd1306_SetCursor+0x2c>)
 8002d6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d6c:	79bb      	ldrb	r3, [r7, #6]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <ssd1306_SetCursor+0x2c>)
 8002d72:	805a      	strh	r2, [r3, #2]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20000594 	.word	0x20000594

08002d84 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002d8e:	2381      	movs	r3, #129	@ 0x81
 8002d90:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fdf7 	bl	8002988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fdf3 	bl	8002988 <ssd1306_WriteCommand>
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002dbc:	23af      	movs	r3, #175	@ 0xaf
 8002dbe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <ssd1306_SetDisplayOn+0x38>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	715a      	strb	r2, [r3, #5]
 8002dc6:	e004      	b.n	8002dd2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002dc8:	23ae      	movs	r3, #174	@ 0xae
 8002dca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <ssd1306_SetDisplayOn+0x38>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fdd7 	bl	8002988 <ssd1306_WriteCommand>
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000594 	.word	0x20000594

08002de8 <memset>:
 8002de8:	4402      	add	r2, r0
 8002dea:	4603      	mov	r3, r0
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d100      	bne.n	8002df2 <memset+0xa>
 8002df0:	4770      	bx	lr
 8002df2:	f803 1b01 	strb.w	r1, [r3], #1
 8002df6:	e7f9      	b.n	8002dec <memset+0x4>

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8002e30 <__libc_init_array+0x38>)
 8002dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8002e34 <__libc_init_array+0x3c>)
 8002dfe:	1b64      	subs	r4, r4, r5
 8002e00:	10a4      	asrs	r4, r4, #2
 8002e02:	2600      	movs	r6, #0
 8002e04:	42a6      	cmp	r6, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	4d0b      	ldr	r5, [pc, #44]	@ (8002e38 <__libc_init_array+0x40>)
 8002e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e3c <__libc_init_array+0x44>)
 8002e0c:	f000 f818 	bl	8002e40 <_init>
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	2600      	movs	r6, #0
 8002e16:	42a6      	cmp	r6, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e20:	4798      	blx	r3
 8002e22:	3601      	adds	r6, #1
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2a:	4798      	blx	r3
 8002e2c:	3601      	adds	r6, #1
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	08003498 	.word	0x08003498
 8002e34:	08003498 	.word	0x08003498
 8002e38:	08003498 	.word	0x08003498
 8002e3c:	0800349c 	.word	0x0800349c

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
